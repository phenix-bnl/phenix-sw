// $Id: TSQLStatement.cxx,v 1.1.1.1 2004/02/18 20:58:02 dave Exp $
//*-- Author : Valeriy Onuchin 14/02/2000 
//

/////////////////////////////////////////////////////////////////////
//
// The object used for executing a static SQL statement and 
// obtaining the results produced by it. 
// 
// Only one TSQLResultSet per TSQLStatement can be open at any point 
// in time. Therefore, if the reading of one TSQLResultSet is
// interleaved with the reading of another, each must have been 
// generated by different TSQLStatements. All statement execute 
// methods  implicitly close a statment's current TSQLResultSet if 
// an open  one exists. 
//
// See also: 
//    TSQLConnection::CreateStatement(), TSQLResultSet 
//    TSQLCallableStatement TSQLPreparedStatement
//Begin_Html
/*
<P>
   The <TT>TSQLStatement</TT> class encapsulates SQL queries to your database. 
Using several methods, these calls return objects that contain the 
results of your SQL query. When you execute an SQL query, the data 
that is returned to you is commonly called the result set. You can 
choose from several result sets, depending on your needs:
<UL>
<LI><TT>TSQLResultSet* ExecuteQuery( const TString& sqlStatement)<BR></TT>
This method sends the SQL query contained in <TT>sqlStatement</TT>
and returns a single set of results. This method is best used 
in sending  <TT>SELECT</TT> statements. These statements typically 
return a result set. This method implicitly deletes previous resultset.

<LI><TT>Int_t ExecuteUpdate( const TString& sqlStatement )<BR></TT>
This method sends the SQL query contained in <TT>sqlStatement</TT> 
and returns an integer. This method is useful when you send SQL 
<TT>INSERT</TT>s,  <TT>DELETE</TT>s, and <TT>UPDATE</TT>s.  These commands return 
a count of rows  that were affected  by your query. This statement 
should not be used for queries that  return result sets.

<LI><TT>Bool_t Execute( const TString& sqlStatement )<BR></TT>
This method sends the <TT>sqlStatement</TT> to the database and returns 
<TT>kTRUE</TT> if the statement returns a result set or <TT>kFALSE</TT> if the 
statement returns an integer. This method is best used when multiple 
result sets can be returned.
</UL>
<P>
Use the following methods to easily navigate the results a query returns:
<UL>
<LI><TT>Bool_t GetMoreResults()<BR> </TT>
This moves to the next result set in the <TT>TSQLStatement</TT>. This, 
like the <TT>Execute()</TT> method, returns <TT>kTRUE</TT> if the  next 
result is a result set or <TT>kFALSE</TT> if it is an  integer.  
If you have  already retrieved a <TT>TSQLResultSet</TT> from  the  
<TT>TSQLStatement</TT>, this method will close it before returning.

<LI><TT>TSQLResultSet* GetResultSet()<BR></TT>
This method returns to you a result set in a <TT>TSQLResultSet</TT> 
object. This result set is the current result set.

<LI><TT>Int_t GetUpdateCount()<BR></TT>
This method returns to you the integer result that an 
<TT>Execute()</TT> method returned.
</UL>
<P>
*/
//End_Html
/////////////////////////////////////////////////////////////////////

#include <RDBC/TSQLStatement.h>
#include <RDBC/TSQLResultSet.h>
#include <RDBC/TSQLConnection.h>
#include <TList.h>

ClassImpQ(TSQLStatement)

/////////////////////////////////////////////////////////////////////
//___________________________________________________________________
TSQLStatement::TSQLStatement( TSQLConnection* con, void* imp ):TSQL(imp)
{
   // ctor
 
   fBatches = new TList();
   fConnection = con;
   fCurrentResult = 0;
}

//___________________________________________________________________
TSQLStatement::~TSQLStatement()
{
   // dtor
  
   if(fCurrentResult && fCurrentResult->fImp) {
     delete fCurrentResult;
     fCurrentResult->fImp = 0;
   }

   fCurrentResult = 0;

   if(fBatches) {
      fBatches->Delete();
      delete fBatches;
   }

   fBatches = 0;
   
   if(fConnection) fConnection->GetListOfStatements()->Remove(this);
}
