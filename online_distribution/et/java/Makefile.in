#
CC  = @CC@
CXX = @CXX@
LD  = @LD@
AR  = @AR@
RANLIB = @RANLIB@
CODA_BIN = @exec_prefix@/bin
CODA_LIB = @exec_prefix@/lib
CODA_INC = @prefix@/include
CODA_JAR = @prefix@/lib/java

# find location of "java" and back up 1 dir to find java's home dir
ifeq ($(JAVAHOME),)
JAVAHOME = $(shell /bin/csh -c "set j = `which java`; set k = \$$j:h; echo \$$k:h")
endif
JAVA_INC = $(JAVAHOME)/include
JAVA_INC_LOCAL = $(JAVA_INC)/@ET_LOCAL_INC@
INSTALL  = ../install-sh -c

AC_FLAGS  = -D_REENTRANT
CFLAGS    = @ET_CFLAGS@ -I../src -I$(JAVA_INC) -I$(JAVA_INC_LOCAL) $(AC_FLAGS)
CXXFLAGS  = $(CFLAGS)
SHLIB_LD  = ld -G
LIBS      = @MATH_LIBS@ @ET_EXTRA_LIBS@ @EXTRA_LIBS@

JAVAC = $(JAVAHOME)/bin/javac
JAVAH = $(JAVAHOME)/bin/javah
JAR   = $(JAVAHOME)/bin/jar
JAVAC_FLAGS = -classpath ./xerces.jar:.:$(CLASSPATH)

JAVA_OBJS = \
	EtViewer.class \
	WholeNumberField.class \
	EtColors.class \
	EtFonts.class \
	EtException.class \
	EtConstants.class \
	EtAttachmentData.class \
	EtProcessData.class \
	EtStationData.class \
	EtSystemData.class \
	EtAllData.class \
	EtSystem.class \
	EtConnection.class \
	EtConnectionThread.class \
	EtConfiguration.class \
	EtDataDisplayOptions.class \
	EtDataDisplay.class

all: libEtNative.so $(JAVA_OBJS)

install: install-lib install-jar

install-lib: libEtNative.so
	@echo "Installing libEtNative.so in $(CODA_LIB)"
	@$(INSTALL) libEtNative.so $(CODA_LIB)/libEtNative.so

install-jar: $(JAVA_OBJS)
	@echo "Jarring .class files"
	$(JAR) cf EtViewer.jar *.class
	@if [ ! -d $(CODA_JAR) ]; then \
	  echo "Making directory $(CODA_JAR)"; \
	  mkdir $(CODA_JAR); \
	fi;
	@echo "Installing EtViewer.jar in $(CODA_JAR)"
	@$(INSTALL) EtViewer.jar $(CODA_JAR)/EtViewer.jar
	@echo "Installing xerces.jar in $(CODA_JAR)"
	@$(INSTALL) xerces.jar $(CODA_JAR)/xerces.jar

libEtNative.so:
	$(JAVAC) EtNative.java $(JAVAC_FLAGS)
	$(JAVAH) -jni EtNative 
	@if test "$(JAVAHOME)" = ""; then \
	  echo "  *** JAVAHOME is not defined, set it to java root directory ***"; \
	else \
	  echo "  *** JAVAHOME is defined as $(JAVAHOME) ***"; \
	fi;
	$(CC) $(CFLAGS) -c EtNative.c
	$(SHLIB_LD) -o libEtNative.so EtNative.o

clean: 
	rm -f core *~ *.o *.so *.class EtViewer.jar

# SUFFIX RULES

.SUFFIXES: .java .class

.java.class:
	$(JAVAC) $< $(JAVAC_FLAGS)
.c:
	$(CC) -o $* $(CFLAGS) $< -L../src -let $(LIBS)
.cc:
	$(CXX) -o $* $(CFLAGS) $< -L../src -let $(LIBS)
.c.o:
	$(CC) -c $(CFLAGS) $<
