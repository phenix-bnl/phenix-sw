//-----------------------------------------------------------------------------
//
//  Decay machine of the EXODUS package
//
//  Main program
//
//-----------------------------------------------------------------------------

#include <Rtypes.h>
#include <TROOT.h>
#include <boost/lexical_cast.hpp>
#include <fstream>
#include <iostream>
#include <string>
#include "FillROOTObjects.h"
#include "OpenROOTFile.h"
#include "ParticleList.h"

TROOT exodus("exodus","Initialize ROOT for exodus");
#include "AdjustDecaySum.h"
#include "BookROOTObjects.h"
#include "CleanupRandom.h"
#include "CloseInputFile.h"
#include "CloseOutputFile.h"
#include "CloseROOTFile.h"
#include "DefineDecayProperties.h"
#include "DefineParticleProperties.h"
#include "DoAllDecays.h"
#include "GetEventFromInputStream.h"
#include "GetPYTHIAEventFromInputStream.h"
#include "InitializeRandom.h"
#include "OpenInputFile.h"
#include "OpenOutputFile.h"
#include "WriteEventToOutputStream.h"

class DecayList;
class ParticlePropertyList;
class TFile;

int main() try
{
  std::ifstream* input_stream = 0;
  std::ofstream* output_stream = 0;
  ParticleList * OneEvent = 0;
  int            setup, generator;
  std::string    input_file, output_file, ascii_output_file;
  int            itotal;
  bool           file_end = false;
  TFile        * root_file = 0;

  gROOT->SetBatch(kTRUE);

  std::cout << std::endl << std::endl;
  std::cout << "**********************************" << std::endl;
  std::cout << "*                                *" << std::endl;
  std::cout << "*  W E L C O M E to E X O D U S  *" << std::endl;
  std::cout << "*                                *" << std::endl;
  std::cout << "*         DECAY  MACHINE         *" << std::endl;
  std::cout << "*                                *" << std::endl;
  std::cout << "*                                *" << std::endl;
  std::cout << "*    Wir kriegen alles klein!    *" << std::endl;
  std::cout << "*                                *" << std::endl;
  std::cout << "**********************************" << std::endl;
  std::cout << std::endl << std::endl;

  std::string line;
  do
  {
    std::cout << "Choose one of the predefined setups:" << std::endl;
    std::cout << "------------------------------------" << std::endl;
    std::cout << std::endl;
    std::cout << "1) CERES" << std::endl;
    std::cout << "2) ISR" << std::endl;
    std::cout << "3) PHENIX" << std::endl;
    std::cout << "4) Phi->KK" << std::endl;
    std::cout << std::endl;
    std::cout << "Your choice (1-4): ";
    std::getline(std::cin, line);
    setup = boost::lexical_cast<int>(line);
    std::cout << std::endl;
  } while ( setup<1 || setup>4 );

  do
  {
    std::cout << "Input file was generated by:" << std::endl;
    std::cout << "----------------------------" << std::endl;
    std::cout << std::endl;
    std::cout << "1) EXODUS" << std::endl;
    std::cout << "2) PYTHIA single leptons" << std::endl;
    std::cout << "3) PYTHIA lepton pairs" << std::endl;
    std::cout << std::endl;
    std::cout << "Your choice (1-3): ";
    std::getline(std::cin, line);
    generator = boost::lexical_cast<int>(line);
    std::cout << std::endl;
  } while ( generator<1 || generator>3 );

  std::cout << std::endl;
  std::cout << "Input file containing first generation particle list: ";
  std::getline(std::cin, input_file);
  std::cout << std::endl;
  std::cout << "Output file containing ROOT objects: ";
  std::getline(std::cin, output_file);
  std::cout << std::endl;
  std::cout << "Output file containing ASCII information: ";
  std::getline(std::cin, ascii_output_file);
  std::cout << std::endl;

  root_file = OpenROOTFile(output_file.c_str());
  BookROOTObjects();
  InitializeRandom();

  ParticlePropertyList * Species = DefineParticleProperties();
  DecayList            * Decays  = DefineDecayProperties(*Species);
  if ( Decays==0 ) return 0;

  input_stream = OpenInputFile(input_file.c_str());
  output_stream = OpenOutputFile(ascii_output_file.c_str());

  itotal = 0;

  do
  {
    if ( generator==1 )
      OneEvent = GetEventFromInputStream(input_stream);
    if ( generator>=2 )
      OneEvent = GetPYTHIAEventFromInputStream(input_stream,generator);
    if ( OneEvent )
    {
      itotal++;
      if ( itotal % 10000 == 0 )
        std::cout << itotal << " primary particles done" << std::endl;
      AdjustDecaySum(*OneEvent, *Decays);
      DoAllDecays(*OneEvent, *Species, *Decays);
      FillROOTObjects(setup,1.,1.,1., *OneEvent, *Species);
      WriteEventToOutputStream(output_stream, *OneEvent);
    }
    if ( OneEvent==0 ) file_end=true;
    delete OneEvent;
    OneEvent = 0;
  }
  while ( !file_end );

  CloseInputFile(*input_stream);
  CloseOutputFile(*output_stream);

  CloseROOTFile(*root_file);
  CleanupRandom();

  return 0;
} catch (const std::exception& e) {
  std::cerr << e.what() << std::endl;
  return EXIT_FAILURE;
}
