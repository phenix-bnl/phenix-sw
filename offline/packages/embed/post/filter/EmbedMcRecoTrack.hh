//////////////////////////////////////////////////////////
//   This class has been automatically generated 
//     (Sat Jul  6 19:41:45 2002 by ROOT version3.01/05)
//   from TTree EmbedMcRecoTrack/EmbedMcRecoTrack
//   found on file: embedmergenew.root
//////////////////////////////////////////////////////////


#ifndef EmbedMcRecoTrack_h
#define EmbedMcRecoTrack_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>

class EmbedMcRecoTrack {
   public :
   TTree          *fChain;   //pointer to the analyzed TTree or TChain
   Int_t           fCurrent; //current Tree number in a TChain
//Declaration of leaves types

// Andrew 11/5 changed some floats to other types.
// All vars were floats before changes.

  Float_t           bbccent;
  Short_t         type;
  //   Float_t         evtID;
   Int_t         idGeant;
//    Float_t         evtxG;
//    Float_t         evtyG;
   Float_t         evtzG;
   Float_t         pptG;
   Float_t         ppzG;
   Float_t         pthe0G;
   Float_t         pphi0G;
   Float_t         prapiG;
   Short_t         genG;
   Int_t         partidG;
   Int_t         pareidG;
   Int_t         primidG;
   Float_t         xvtxG;
   Float_t         yvtxG;
   Float_t         zvtxG;
   Float_t         projzG;
   Float_t         bbcQsum;
   Float_t         zdcEsum;
   Float_t         bbcvtx;
   Float_t         bbct0;
   Short_t         ntrkG;
   Short_t         dctrkidG;
   Short_t         dctrkQualG;
   Float_t         armsidG;
   Float_t         the0G;
   Float_t         phi0G;
   Float_t         alphaG;
   Float_t         thetaG;
   Float_t         phiG;
   Float_t         betaG;
   Float_t         zedG;
   Float_t         momG;
   Float_t         x1mG;
   Float_t         x2mG;
   Short_t         x1hG;
   Short_t         x2hG;
   Float_t         uv1hG;
   Float_t         uv2hG;
   Short_t         ntrkS;
   Float_t         dctrkidS;
   Short_t         dctrkQualS;
   Float_t         the0S;
   Float_t         phi0S;
   Float_t         alphaS;
   Float_t         thetaS;
   Float_t         phiS;
   Float_t         betaS;
   Float_t         zedS;
   Float_t         dcchi2S;
   Float_t         momS;
   Float_t         x1mS;
   Float_t         x2mS;
   Short_t         x1hS;
   Short_t         x2hS;
   Float_t         uv1hS;
   Float_t         uv2hS;
   Float_t         projzS;
   Float_t         x1hE;
   Float_t         x2hE;
   Float_t         uv1hE;
   Float_t         uv2hE;
   Float_t         ntrkwBR;
   Float_t         ntrkeBR;
   Float_t         ntrkwAR;
   Float_t         ntrkeAR;
   Float_t         dctrkidR;
   Short_t         dctrkQualR;
   Float_t         armsidR;
   Float_t         the0R;
   Float_t         phi0R;
   Float_t         alphaR;
   Float_t         thetaR;
   Float_t         phiR;
   Float_t         betaR;
   Float_t         zedR;
   Float_t         momR;
   Float_t         dcchi2R;
   Float_t         x1mR;
   Float_t         x2mR;
   Short_t         x1hR;
   Short_t         x2hR;
   Float_t         uv1hR;
   Float_t         uv2hR;
   Float_t         projzR;
   Float_t         pc1idMc;
   Float_t         pc2idMc;
   Float_t         pc3idMc;
   Float_t         pc1xMc;
   Float_t         pc1yMc;
   Float_t         pc1zMc;
   Float_t         pc2xMc;
   Float_t         pc2yMc;
   Float_t         pc2zMc;
   Float_t         pc3xMc;
   Float_t         pc3yMc;
   Float_t         pc3zMc;
   Float_t         pc1idS;
   Float_t         pc2idS;
   Float_t         pc3idS;
   Float_t         pc1xS;
   Float_t         pc1yS;
   Float_t         pc1zS;
   Float_t         pc2xS;
   Float_t         pc2yS;
   Float_t         pc2zS;
   Float_t         pc3xS;
   Float_t         pc3yS;
   Float_t         pc3zS;
   Float_t         ppc1xS;
   Float_t         ppc1yS;
   Float_t         ppc1zS;
   Float_t         ppc2xS;
   Float_t         ppc2yS;
   Float_t         ppc2zS;
   Float_t         ppc3xS;
   Float_t         ppc3yS;
   Float_t         ppc3zS;
   Short_t         pc1idE;
   Short_t         pc2idE;
   Short_t         pc3idE;
   Short_t         pc1idR;
   Short_t         pc2idR;
   Short_t         pc3idR;
   Float_t         pc1xR;
   Float_t         pc1yR;
   Float_t         pc1zR;
   Float_t         pc2xR;
   Float_t         pc2yR;
   Float_t         pc2zR;
   Float_t         pc3xR;
   Float_t         pc3yR;
   Float_t         pc3zR;
   Float_t         ppc1xR;
   Float_t         ppc1yR;
   Float_t         ppc1zR;
   Float_t         ppc2xR;
   Float_t         ppc2yR;
   Float_t         ppc2zR;
   Float_t         ppc3xR;
   Float_t         ppc3yR;
   Float_t         ppc3zR;
   Float_t         tofidMc;
   Float_t         tofxMc;
   Float_t         tofyMc;
   Float_t         tofzMc;
   Float_t         toftMc;
   Float_t         tofeMc;
   Float_t         pltofMc;
   Float_t         tofidS;
   Float_t         tofxS;
   Float_t         tofyS;
   Float_t         tofzS;
   Float_t         toftS;
   Float_t         tofeS;
   Int_t         tofpidS;
   Float_t         ptofxS;
   Float_t         ptofyS;
   Float_t         ptofzS;
   Float_t         pltofS;
   Float_t         tofidE;
   Float_t         tofidR;
   Float_t         tofxR;
   Float_t         tofyR;
   Float_t         tofzR;
   Float_t         toftR;
   Float_t         tofeR;
   Int_t         tofpidR;
   Float_t         ptofxR;
   Float_t         ptofyR;
   Float_t         ptofzR;
   Float_t         pltofR;
   Float_t         tecidMc;
   Float_t         tecxMc;
   Float_t         tecyMc;
   Float_t         teczMc;
   Float_t         tecidS;
   Float_t         tecxS;
   Float_t         tecyS;
   Float_t         teczS;
   Float_t         ptecxS;
   Float_t         ptecyS;
   Float_t         pteczS;
   Float_t         tecidE;
   Float_t         tecidR;
   Float_t         tecxR;
   Float_t         tecyR;
   Float_t         teczR;
   Float_t         ptecxR;
   Float_t         ptecyR;
   Float_t         pteczR;
   Float_t         plcrkMc;
   Float_t         plcrkS;
   Short_t         crkaccS;
   Short_t         crknpmt0S;
   Short_t         crknpmt1S;
   Short_t         crknpmt3S;
   Float_t         crknpe0S;
   Float_t         crknpe1S;
   Float_t         crknpe3S;
   Float_t         crkchi2S;
   Float_t         crkdispS;
   Float_t         crkpathS;
   Float_t         plcrkR;
   Short_t         crkaccR;
   Short_t         crknpmt0R;
   Short_t         crknpmt1R;
   Short_t         crknpmt3R;
   Float_t         crknpe0R;
   Float_t         crknpe1R;
   Float_t         crknpe3R;
   Float_t         crkchi2R;
   Float_t         crkdispR;
   Float_t         crkpathR;
   Float_t         emcidMc;
   Float_t         emcxMc;
   Float_t         emcyMc;
   Float_t         emczMc;
   Float_t         plemcMc;
   Short_t         emctrkno0Mc;
   Short_t         emctrkno1Mc;
   Short_t         emctrkno2Mc;
   Short_t         emctwrhit0Mc;
   Short_t         emctwrhit1Mc;
   Short_t         emctwrhit2Mc;
   Short_t         emcpid0Mc;
   Short_t         emcpid1Mc;
   Short_t         emcpid2Mc;
   Float_t         emcedep0Mc;
   Float_t         emcedep1Mc;
   Float_t         emcedep2Mc;
   Float_t         emcptot0Mc;
   Float_t         emcptot1Mc;
   Float_t         emcptot2Mc;
   Float_t         emcidS;
   Float_t         emcxS;
   Float_t         emcyS;
   Float_t         emczS;
   Float_t         pemcxS;
   Float_t         pemcyS;
   Float_t         pemczS;
   Float_t         plemcS;
   Short_t         emcswkeyS;
   Float_t         emcmeaseS;
   Float_t         emcecoreS;
   Float_t         emcecentS;
   Float_t         emcecorrS;
   Float_t         emctofS;
   Float_t         emctofcorrS;
   Float_t         emctofminS;
   Float_t         emcprobphotS;
   Short_t         emctwrhitS;
   Float_t         emcchi2S;
   Float_t         emcpartesum0S;
   Float_t         emcpartesum1S;
   Float_t         emcpartesum2S;
   Float_t         emcpartesum3S;
   Float_t         emcidE;
   Float_t         emcidR;
   Float_t         emcxR;
   Float_t         emcyR;
   Float_t         emczR;
   Float_t         pemcxR;
   Float_t         pemcyR;
   Float_t         pemczR;
   Float_t         plemcR;
   Short_t         emcswkeyR;
   Float_t         emcmeaseR;
   Float_t         emcecoreR;
   Float_t         emcecentR;
   Float_t         emcecorrR;
   Float_t         emctofR;
   Float_t         emctofcorrR;
   Float_t         emctofminR;
   Float_t         emcprobphotR;
   Short_t         emctwrhitR;
   Float_t         emcchi2R;
   Float_t         emcpartesum0R;
   Float_t         emcpartesum1R;
   Float_t         emcpartesum2R;
   Float_t         emcpartesum3R;
   Float_t         nx1x2fitS;
   Float_t         mchi2S;
   Float_t         errS;
   Float_t         alphafS;
   Float_t         nx1x2fitR;
   Float_t         mchi2R;
   Float_t         errR;
   Float_t         alphafR;
   Short_t         sumfound;
   Short_t         solution;
   Short_t         mulmainS;
   Short_t         xmulmainS;
   Short_t         uvmulmainS;
   Float_t         mainIDS;
   Float_t         xmainIDS;
   Float_t         uvmainIDS;
   Float_t         purityS;
   Float_t         xpurityS;
   Float_t         uvpurityS;
   Float_t         dalphaS;
   Float_t         dbetaS;
   Float_t         dphiS;
   Float_t         dzedS;
   Float_t         ddistS;
   Short_t         sumfoundS;
   Float_t         solutionS;
   Float_t         dalphaMinS;
   Float_t         dphiMinS;
   Short_t         mulmainR;
   Short_t         xmulmainR;
   Short_t         uvmulmainR;
   Float_t         mainIDR;
   Float_t         xmainIDR;
   Float_t         uvmainIDR;
   Float_t         purityR;
   Float_t         xpurityR;
   Float_t         uvpurityR;
   Float_t         dalphaR;
   Float_t         dbetaR;
   Float_t         dphiR;
   Float_t         dzedR;
   Float_t         ddistR;
   Short_t         sumfoundR;
   Float_t         solutionR;
   Float_t         dalphaMinR;
   Float_t         dphiMinR;
   Float_t         pc2sS;
   Float_t         pc2sdphiS;
   Float_t         pc2sdzS;
   Float_t         pc2dphiS;
   Float_t         pc2dzS;
   Float_t         pc3sS;
   Float_t         pc3sdphiS;
   Float_t         pc3sdzS;
   Float_t         pc3dphiS;
   Float_t         pc3dzS;
   Float_t         tofsS;
   Float_t         tofsdphiS;
   Float_t         tofsdzS;
   Float_t         tofdphiS;
   Float_t         tofdzS;
   Float_t         emcsS;
   Float_t         emcsdphiS;
   Float_t         emcsdzS;
   Float_t         emcdphiS;
   Float_t         emcdzS;
   Float_t         pc2sR;
   Float_t         pc2sdphiR;
   Float_t         pc2sdzR;
   Float_t         pc2dphiR;
   Float_t         pc2dzR;
   Float_t         pc3sR;
   Float_t         pc3sdphiR;
   Float_t         pc3sdzR;
   Float_t         pc3dphiR;
   Float_t         pc3dzR;
   Float_t         tofsR;
   Float_t         tofsdphiR;
   Float_t         tofsdzR;
   Float_t         tofdphiR;
   Float_t         tofdzR;
   Float_t         emcsR;
   Float_t         emcsdphiR;
   Float_t         emcsdzR;
   Float_t         emcdphiR;
   Float_t         emcdzR;
   Float_t         centperp;
   Float_t         centclock;
   Short_t         x1hSG;
   Short_t         x2hSG;
   Short_t         uvhSG;
   Short_t         x1hRG;
   Float_t         x2RG;
   Short_t         uvhRG;
   Short_t         x1hRS;
   Short_t         x2hRS;
   Short_t         uvhRS;

//List of branches
   TBranch        *b_bbccent;
   TBranch        *b_type;
  //   TBranch        *b_evtID;
   TBranch        *b_idGeant;
   TBranch        *b_evtxG;
   TBranch        *b_evtyG;
   TBranch        *b_evtzG;
   TBranch        *b_pptG;
   TBranch        *b_ppzG;
   TBranch        *b_pthe0G;
   TBranch        *b_pphi0G;
   TBranch        *b_prapiG;
   TBranch        *b_genG;
   TBranch        *b_partidG;
   TBranch        *b_pareidG;
   TBranch        *b_primidG;
   TBranch        *b_xvtxG;
   TBranch        *b_yvtxG;
   TBranch        *b_zvtxG;
   TBranch        *b_projzG;
   TBranch        *b_bbcQsum;
   TBranch        *b_zdcEsum;
   TBranch        *b_bbcvtx;
   TBranch        *b_bbct0;
   TBranch        *b_ntrkG;
   TBranch        *b_dctrkidG;
   TBranch        *b_dctrkQualG;
   TBranch        *b_armsidG;
   TBranch        *b_the0G;
   TBranch        *b_phi0G;
   TBranch        *b_alphaG;
   TBranch        *b_thetaG;
   TBranch        *b_phiG;
   TBranch        *b_betaG;
   TBranch        *b_zedG;
   TBranch        *b_momG;
   TBranch        *b_x1mG;
   TBranch        *b_x2mG;
   TBranch        *b_x1hG;
   TBranch        *b_x2hG;
   TBranch        *b_uv1hG;
   TBranch        *b_uv2hG;
   TBranch        *b_ntrkS;
   TBranch        *b_dctrkidS;
   TBranch        *b_dctrkQualS;
   TBranch        *b_the0S;
   TBranch        *b_phi0S;
   TBranch        *b_alphaS;
   TBranch        *b_thetaS;
   TBranch        *b_phiS;
   TBranch        *b_betaS;
   TBranch        *b_zedS;
   TBranch        *b_dcchi2S;
   TBranch        *b_momS;
   TBranch        *b_x1mS;
   TBranch        *b_x2mS;
   TBranch        *b_x1hS;
   TBranch        *b_x2hS;
   TBranch        *b_uv1hS;
   TBranch        *b_uv2hS;
   TBranch        *b_projzS;
   TBranch        *b_x1hE;
   TBranch        *b_x2hE;
   TBranch        *b_uv1hE;
   TBranch        *b_uv2hE;
   TBranch        *b_ntrkwBR;
   TBranch        *b_ntrkeBR;
   TBranch        *b_ntrkwAR;
   TBranch        *b_ntrkeAR;
   TBranch        *b_dctrkidR;
   TBranch        *b_dctrkQualR;
   TBranch        *b_armsidR;
   TBranch        *b_the0R;
   TBranch        *b_phi0R;
   TBranch        *b_alphaR;
   TBranch        *b_thetaR;
   TBranch        *b_phiR;
   TBranch        *b_betaR;
   TBranch        *b_zedR;
   TBranch        *b_momR;
   TBranch        *b_dcchi2R;
   TBranch        *b_x1mR;
   TBranch        *b_x2mR;
   TBranch        *b_x1hR;
   TBranch        *b_x2hR;
   TBranch        *b_uv1hR;
   TBranch        *b_uv2hR;
   TBranch        *b_projzR;
   TBranch        *b_pc1idMc;
   TBranch        *b_pc2idMc;
   TBranch        *b_pc3idMc;
   TBranch        *b_pc1xMc;
   TBranch        *b_pc1yMc;
   TBranch        *b_pc1zMc;
   TBranch        *b_pc2xMc;
   TBranch        *b_pc2yMc;
   TBranch        *b_pc2zMc;
   TBranch        *b_pc3xMc;
   TBranch        *b_pc3yMc;
   TBranch        *b_pc3zMc;
   TBranch        *b_pc1idS;
   TBranch        *b_pc2idS;
   TBranch        *b_pc3idS;
   TBranch        *b_pc1xS;
   TBranch        *b_pc1yS;
   TBranch        *b_pc1zS;
   TBranch        *b_pc2xS;
   TBranch        *b_pc2yS;
   TBranch        *b_pc2zS;
   TBranch        *b_pc3xS;
   TBranch        *b_pc3yS;
   TBranch        *b_pc3zS;
   TBranch        *b_ppc1xS;
   TBranch        *b_ppc1yS;
   TBranch        *b_ppc1zS;
   TBranch        *b_ppc2xS;
   TBranch        *b_ppc2yS;
   TBranch        *b_ppc2zS;
   TBranch        *b_ppc3xS;
   TBranch        *b_ppc3yS;
   TBranch        *b_ppc3zS;
   TBranch        *b_pc1idE;
   TBranch        *b_pc2idE;
   TBranch        *b_pc3idE;
   TBranch        *b_pc1idR;
   TBranch        *b_pc2idR;
   TBranch        *b_pc3idR;
   TBranch        *b_pc1xR;
   TBranch        *b_pc1yR;
   TBranch        *b_pc1zR;
   TBranch        *b_pc2xR;
   TBranch        *b_pc2yR;
   TBranch        *b_pc2zR;
   TBranch        *b_pc3xR;
   TBranch        *b_pc3yR;
   TBranch        *b_pc3zR;
   TBranch        *b_ppc1xR;
   TBranch        *b_ppc1yR;
   TBranch        *b_ppc1zR;
   TBranch        *b_ppc2xR;
   TBranch        *b_ppc2yR;
   TBranch        *b_ppc2zR;
   TBranch        *b_ppc3xR;
   TBranch        *b_ppc3yR;
   TBranch        *b_ppc3zR;
   TBranch        *b_tofidMc;
   TBranch        *b_tofxMc;
   TBranch        *b_tofyMc;
   TBranch        *b_tofzMc;
   TBranch        *b_toftMc;
   TBranch        *b_tofeMc;
   TBranch        *b_pltofMc;
   TBranch        *b_tofidS;
   TBranch        *b_tofxS;
   TBranch        *b_tofyS;
   TBranch        *b_tofzS;
   TBranch        *b_toftS;
   TBranch        *b_tofeS;
   TBranch        *b_tofpidS;
   TBranch        *b_ptofxS;
   TBranch        *b_ptofyS;
   TBranch        *b_ptofzS;
   TBranch        *b_pltofS;
   TBranch        *b_tofidE;
   TBranch        *b_tofidR;
   TBranch        *b_tofxR;
   TBranch        *b_tofyR;
   TBranch        *b_tofzR;
   TBranch        *b_toftR;
   TBranch        *b_tofeR;
   TBranch        *b_tofpidR;
   TBranch        *b_ptofxR;
   TBranch        *b_ptofyR;
   TBranch        *b_ptofzR;
   TBranch        *b_pltofR;
   TBranch        *b_tecidMc;
   TBranch        *b_tecxMc;
   TBranch        *b_tecyMc;
   TBranch        *b_teczMc;
   TBranch        *b_tecidS;
   TBranch        *b_tecxS;
   TBranch        *b_tecyS;
   TBranch        *b_teczS;
   TBranch        *b_ptecxS;
   TBranch        *b_ptecyS;
   TBranch        *b_pteczS;
   TBranch        *b_tecidE;
   TBranch        *b_tecidR;
   TBranch        *b_tecxR;
   TBranch        *b_tecyR;
   TBranch        *b_teczR;
   TBranch        *b_ptecxR;
   TBranch        *b_ptecyR;
   TBranch        *b_pteczR;
   TBranch        *b_plcrkMc;
   TBranch        *b_plcrkS;
   TBranch        *b_crkaccS;
   TBranch        *b_crknpmt0S;
   TBranch        *b_crknpmt1S;
   TBranch        *b_crknpmt3S;
   TBranch        *b_crknpe0S;
   TBranch        *b_crknpe1S;
   TBranch        *b_crknpe3S;
   TBranch        *b_crkchi2S;
   TBranch        *b_crkdispS;
   TBranch        *b_crkpathS;
   TBranch        *b_plcrkR;
   TBranch        *b_crkaccR;
   TBranch        *b_crknpmt0R;
   TBranch        *b_crknpmt1R;
   TBranch        *b_crknpmt3R;
   TBranch        *b_crknpe0R;
   TBranch        *b_crknpe1R;
   TBranch        *b_crknpe3R;
   TBranch        *b_crkchi2R;
   TBranch        *b_crkdispR;
   TBranch        *b_crkpathR;
   TBranch        *b_emcidMc;
   TBranch        *b_emcxMc;
   TBranch        *b_emcyMc;
   TBranch        *b_emczMc;
   TBranch        *b_plemcMc;
   TBranch        *b_emctrkno0Mc;
   TBranch        *b_emctrkno1Mc;
   TBranch        *b_emctrkno2Mc;
   TBranch        *b_emctwrhit0Mc;
   TBranch        *b_emctwrhit1Mc;
   TBranch        *b_emctwrhit2Mc;
   TBranch        *b_emcpid0Mc;
   TBranch        *b_emcpid1Mc;
   TBranch        *b_emcpid2Mc;
   TBranch        *b_emcedep0Mc;
   TBranch        *b_emcedep1Mc;
   TBranch        *b_emcedep2Mc;
   TBranch        *b_emcptot0Mc;
   TBranch        *b_emcptot1Mc;
   TBranch        *b_emcptot2Mc;
   TBranch        *b_emcidS;
   TBranch        *b_emcxS;
   TBranch        *b_emcyS;
   TBranch        *b_emczS;
   TBranch        *b_pemcxS;
   TBranch        *b_pemcyS;
   TBranch        *b_pemczS;
   TBranch        *b_plemcS;
   TBranch        *b_emcswkeyS;
   TBranch        *b_emcmeaseS;
   TBranch        *b_emcecoreS;
   TBranch        *b_emcecentS;
   TBranch        *b_emcecorrS;
   TBranch        *b_emctofS;
   TBranch        *b_emctofcorrS;
   TBranch        *b_emctofminS;
   TBranch        *b_emcprobphotS;
   TBranch        *b_emctwrhitS;
   TBranch        *b_emcchi2S;
   TBranch        *b_emcpartesum0S;
   TBranch        *b_emcpartesum1S;
   TBranch        *b_emcpartesum2S;
   TBranch        *b_emcpartesum3S;
   TBranch        *b_emcidE;
   TBranch        *b_emcidR;
   TBranch        *b_emcxR;
   TBranch        *b_emcyR;
   TBranch        *b_emczR;
   TBranch        *b_pemcxR;
   TBranch        *b_pemcyR;
   TBranch        *b_pemczR;
   TBranch        *b_plemcR;
   TBranch        *b_emcswkeyR;
   TBranch        *b_emcmeaseR;
   TBranch        *b_emcecoreR;
   TBranch        *b_emcecentR;
   TBranch        *b_emcecorrR;
   TBranch        *b_emctofR;
   TBranch        *b_emctofcorrR;
   TBranch        *b_emctofminR;
   TBranch        *b_emcprobphotR;
   TBranch        *b_emctwrhitR;
   TBranch        *b_emcchi2R;
   TBranch        *b_emcpartesum0R;
   TBranch        *b_emcpartesum1R;
   TBranch        *b_emcpartesum2R;
   TBranch        *b_emcpartesum3R;
   TBranch        *b_nx1x2fitS;
   TBranch        *b_mchi2S;
   TBranch        *b_errS;
   TBranch        *b_alphafS;
   TBranch        *b_nx1x2fitR;
   TBranch        *b_mchi2R;
   TBranch        *b_errR;
   TBranch        *b_alphafR;
   TBranch        *b_sumfound;
   TBranch        *b_solution;
   TBranch        *b_mulmainS;
   TBranch        *b_xmulmainS;
   TBranch        *b_uvmulmainS;
   TBranch        *b_mainIDS;
   TBranch        *b_xmainIDS;
   TBranch        *b_uvmainIDS;
   TBranch        *b_purityS;
   TBranch        *b_xpurityS;
   TBranch        *b_uvpurityS;
   TBranch        *b_dalphaS;
   TBranch        *b_dbetaS;
   TBranch        *b_dphiS;
   TBranch        *b_dzedS;
   TBranch        *b_ddistS;
   TBranch        *b_sumfoundS;
   TBranch        *b_solutionS;
   TBranch        *b_dalphaMinS;
   TBranch        *b_dphiMinS;
   TBranch        *b_mulmainR;
   TBranch        *b_xmulmainR;
   TBranch        *b_uvmulmainR;
   TBranch        *b_mainIDR;
   TBranch        *b_xmainIDR;
   TBranch        *b_uvmainIDR;
   TBranch        *b_purityR;
   TBranch        *b_xpurityR;
   TBranch        *b_uvpurityR;
   TBranch        *b_dalphaR;
   TBranch        *b_dbetaR;
   TBranch        *b_dphiR;
   TBranch        *b_dzedR;
   TBranch        *b_ddistR;
   TBranch        *b_sumfoundR;
   TBranch        *b_solutionR;
   TBranch        *b_dalphaMinR;
   TBranch        *b_dphiMinR;
   TBranch        *b_pc2sS;
   TBranch        *b_pc2sdphiS;
   TBranch        *b_pc2sdzS;
   TBranch        *b_pc2dphiS;
   TBranch        *b_pc2dzS;
   TBranch        *b_pc3sS;
   TBranch        *b_pc3sdphiS;
   TBranch        *b_pc3sdzS;
   TBranch        *b_pc3dphiS;
   TBranch        *b_pc3dzS;
   TBranch        *b_tofsS;
   TBranch        *b_tofsdphiS;
   TBranch        *b_tofsdzS;
   TBranch        *b_tofdphiS;
   TBranch        *b_tofdzS;
   TBranch        *b_emcsS;
   TBranch        *b_emcsdphiS;
   TBranch        *b_emcsdzS;
   TBranch        *b_emcdphiS;
   TBranch        *b_emcdzS;
   TBranch        *b_pc2sR;
   TBranch        *b_pc2sdphiR;
   TBranch        *b_pc2sdzR;
   TBranch        *b_pc2dphiR;
   TBranch        *b_pc2dzR;
   TBranch        *b_pc3sR;
   TBranch        *b_pc3sdphiR;
   TBranch        *b_pc3sdzR;
   TBranch        *b_pc3dphiR;
   TBranch        *b_pc3dzR;
   TBranch        *b_tofsR;
   TBranch        *b_tofsdphiR;
   TBranch        *b_tofsdzR;
   TBranch        *b_tofdphiR;
   TBranch        *b_tofdzR;
   TBranch        *b_emcsR;
   TBranch        *b_emcsdphiR;
   TBranch        *b_emcsdzR;
   TBranch        *b_emcdphiR;
   TBranch        *b_emcdzR;
   TBranch        *b_centperp;
   TBranch        *b_centclock;
   TBranch        *b_x1hSG;
   TBranch        *b_x2hSG;
   TBranch        *b_uvhSG;
   TBranch        *b_x1hRG;
   TBranch        *b_x2RG;
   TBranch        *b_uvhRG;
   TBranch        *b_x1hRS;
   TBranch        *b_x2hRS;
   TBranch        *b_uvhRS;

   EmbedMcRecoTrack(TTree *tree=0);
   ~EmbedMcRecoTrack();
   Int_t  Cut(Int_t entry);
   Int_t  GetEntry(Int_t entry);
   Int_t  LoadTree(Int_t entry);
   void   Init(TTree *tree);
   void   Loop(char *name);
   Bool_t Notify();
   void   Show(Int_t entry = -1);
};

#endif

#ifdef EmbedMcRecoTrack_cxx
EmbedMcRecoTrack::EmbedMcRecoTrack(TTree *tree)
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("embedmergenew.root");
      if (!f) {
         f = new TFile("embedmergenew.root");
      }
      tree = (TTree*)gDirectory->Get("EmbedMcRecoTrack");

   }
   Init(tree);
}

EmbedMcRecoTrack::~EmbedMcRecoTrack()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t EmbedMcRecoTrack::GetEntry(Int_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Int_t EmbedMcRecoTrack::LoadTree(Int_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Int_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->IsA() != TChain::Class()) return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent) {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void EmbedMcRecoTrack::Init(TTree *tree)
{
//   Set branch addresses
   if (tree == 0) return;
   fChain    = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   // I added this Nov 5 -AMA
   fChain->SetBranchAddress("bbccent",&bbccent);

   fChain->SetBranchAddress("type",&type);
   //   fChain->SetBranchAddress("evtID",&evtID);
   fChain->SetBranchAddress("idGeant",&idGeant);
//    fChain->SetBranchAddress("evtxG",&evtxG);
//    fChain->SetBranchAddress("evtyG",&evtyG);
   fChain->SetBranchAddress("evtzG",&evtzG);
   fChain->SetBranchAddress("pptG",&pptG);
   fChain->SetBranchAddress("ppzG",&ppzG);
   fChain->SetBranchAddress("pthe0G",&pthe0G);
   fChain->SetBranchAddress("pphi0G",&pphi0G);
   fChain->SetBranchAddress("prapiG",&prapiG);
   fChain->SetBranchAddress("genG",&genG);
   fChain->SetBranchAddress("partidG",&partidG);
   fChain->SetBranchAddress("pareidG",&pareidG);
   fChain->SetBranchAddress("primidG",&primidG);
   fChain->SetBranchAddress("xvtxG",&xvtxG);
   fChain->SetBranchAddress("yvtxG",&yvtxG);
   fChain->SetBranchAddress("zvtxG",&zvtxG);
   //   fChain->SetBranchAddress("projzG",&projzG);
   //   fChain->SetBranchAddress("bbcQsum",&bbcQsum);
   //   fChain->SetBranchAddress("zdcEsum",&zdcEsum);
   fChain->SetBranchAddress("bbcvtx",&bbcvtx);
   fChain->SetBranchAddress("bbct0",&bbct0);
   fChain->SetBranchAddress("ntrkG",&ntrkG);
   fChain->SetBranchAddress("dctrkidG",&dctrkidG);
   fChain->SetBranchAddress("dctrkQualG",&dctrkQualG);
   //   fChain->SetBranchAddress("armsidG",&armsidG);
   fChain->SetBranchAddress("the0G",&the0G);
   fChain->SetBranchAddress("phi0G",&phi0G);
   fChain->SetBranchAddress("alphaG",&alphaG);
   fChain->SetBranchAddress("thetaG",&thetaG);
   fChain->SetBranchAddress("phiG",&phiG);
   fChain->SetBranchAddress("betaG",&betaG);
   fChain->SetBranchAddress("zedG",&zedG);
   fChain->SetBranchAddress("momG",&momG);
//    fChain->SetBranchAddress("x1mG",&x1mG);
//    fChain->SetBranchAddress("x2mG",&x2mG);
   fChain->SetBranchAddress("x1hG",&x1hG);
   fChain->SetBranchAddress("x2hG",&x2hG);
//    fChain->SetBranchAddress("uv1hG",&uv1hG);
//    fChain->SetBranchAddress("uv2hG",&uv2hG);
   fChain->SetBranchAddress("ntrkS",&ntrkS);
   //   fChain->SetBranchAddress("dctrkidS",&dctrkidS);
   fChain->SetBranchAddress("dctrkQualS",&dctrkQualS);
   fChain->SetBranchAddress("the0S",&the0S);
   fChain->SetBranchAddress("phi0S",&phi0S);
   fChain->SetBranchAddress("alphaS",&alphaS);
   fChain->SetBranchAddress("thetaS",&thetaS);
   fChain->SetBranchAddress("phiS",&phiS);
   fChain->SetBranchAddress("betaS",&betaS);
   fChain->SetBranchAddress("zedS",&zedS);
   fChain->SetBranchAddress("dcchi2S",&dcchi2S);
   fChain->SetBranchAddress("momS",&momS);
//    fChain->SetBranchAddress("x1mS",&x1mS);
//    fChain->SetBranchAddress("x2mS",&x2mS);
   fChain->SetBranchAddress("x1hS",&x1hS);
   fChain->SetBranchAddress("x2hS",&x2hS);
//    fChain->SetBranchAddress("uv1hS",&uv1hS);
//    fChain->SetBranchAddress("uv2hS",&uv2hS);
//    fChain->SetBranchAddress("projzS",&projzS);
//    fChain->SetBranchAddress("x1hE",&x1hE);
//    fChain->SetBranchAddress("x2hE",&x2hE);
//    fChain->SetBranchAddress("uv1hE",&uv1hE);
//    fChain->SetBranchAddress("uv2hE",&uv2hE);
//    fChain->SetBranchAddress("ntrkwBR",&ntrkwBR);
//    fChain->SetBranchAddress("ntrkeBR",&ntrkeBR);
//    fChain->SetBranchAddress("ntrkwAR",&ntrkwAR);
//    fChain->SetBranchAddress("ntrkeAR",&ntrkeAR);
//   fChain->SetBranchAddress("dctrkidR",&dctrkidR);
   fChain->SetBranchAddress("dctrkQualR",&dctrkQualR);
   //   fChain->SetBranchAddress("armsidR",&armsidR);
   fChain->SetBranchAddress("the0R",&the0R);
   fChain->SetBranchAddress("phi0R",&phi0R);
   fChain->SetBranchAddress("alphaR",&alphaR);
   fChain->SetBranchAddress("thetaR",&thetaR);
   fChain->SetBranchAddress("phiR",&phiR);
   fChain->SetBranchAddress("betaR",&betaR);
   fChain->SetBranchAddress("zedR",&zedR);
   fChain->SetBranchAddress("momR",&momR);
   //   fChain->SetBranchAddress("dcchi2R",&dcchi2R);
//    fChain->SetBranchAddress("x1mR",&x1mR);
//    fChain->SetBranchAddress("x2mR",&x2mR);
   fChain->SetBranchAddress("x1hR",&x1hR);
   fChain->SetBranchAddress("x2hR",&x2hR);
//    fChain->SetBranchAddress("uv1hR",&uv1hR);
//    fChain->SetBranchAddress("uv2hR",&uv2hR);
//   fChain->SetBranchAddress("projzR",&projzR);
//    fChain->SetBranchAddress("pc1idMc",&pc1idMc);
//    fChain->SetBranchAddress("pc2idMc",&pc2idMc);
//    fChain->SetBranchAddress("pc3idMc",&pc3idMc);
   fChain->SetBranchAddress("pc1xMc",&pc1xMc);
   fChain->SetBranchAddress("pc1yMc",&pc1yMc);
   fChain->SetBranchAddress("pc1zMc",&pc1zMc);
   fChain->SetBranchAddress("pc2xMc",&pc2xMc);
   fChain->SetBranchAddress("pc2yMc",&pc2yMc);
   fChain->SetBranchAddress("pc2zMc",&pc2zMc);
   fChain->SetBranchAddress("pc3xMc",&pc3xMc);
   fChain->SetBranchAddress("pc3yMc",&pc3yMc);
   fChain->SetBranchAddress("pc3zMc",&pc3zMc);
//    fChain->SetBranchAddress("pc1idS",&pc1idS);
//    fChain->SetBranchAddress("pc2idS",&pc2idS);
//    fChain->SetBranchAddress("pc3idS",&pc3idS);
   fChain->SetBranchAddress("pc1xS",&pc1xS);
   fChain->SetBranchAddress("pc1yS",&pc1yS);
   fChain->SetBranchAddress("pc1zS",&pc1zS);
   fChain->SetBranchAddress("pc2xS",&pc2xS);
   fChain->SetBranchAddress("pc2yS",&pc2yS);
   fChain->SetBranchAddress("pc2zS",&pc2zS);
   fChain->SetBranchAddress("pc3xS",&pc3xS);
   fChain->SetBranchAddress("pc3yS",&pc3yS);
   fChain->SetBranchAddress("pc3zS",&pc3zS);
   fChain->SetBranchAddress("ppc1xS",&ppc1xS);
   fChain->SetBranchAddress("ppc1yS",&ppc1yS);
   fChain->SetBranchAddress("ppc1zS",&ppc1zS);
   fChain->SetBranchAddress("ppc2xS",&ppc2xS);
   fChain->SetBranchAddress("ppc2yS",&ppc2yS);
   fChain->SetBranchAddress("ppc2zS",&ppc2zS);
   fChain->SetBranchAddress("ppc3xS",&ppc3xS);
   fChain->SetBranchAddress("ppc3yS",&ppc3yS);
   fChain->SetBranchAddress("ppc3zS",&ppc3zS);
   fChain->SetBranchAddress("pc1idE",&pc1idE);
   fChain->SetBranchAddress("pc2idE",&pc2idE);
   fChain->SetBranchAddress("pc3idE",&pc3idE);
   fChain->SetBranchAddress("pc1idR",&pc1idR);
   fChain->SetBranchAddress("pc2idR",&pc2idR);
   fChain->SetBranchAddress("pc3idR",&pc3idR);
   fChain->SetBranchAddress("pc1xR",&pc1xR);
   fChain->SetBranchAddress("pc1yR",&pc1yR);
   fChain->SetBranchAddress("pc1zR",&pc1zR);
   fChain->SetBranchAddress("pc2xR",&pc2xR);
   fChain->SetBranchAddress("pc2yR",&pc2yR);
   fChain->SetBranchAddress("pc2zR",&pc2zR);
   fChain->SetBranchAddress("pc3xR",&pc3xR);
   fChain->SetBranchAddress("pc3yR",&pc3yR);
   fChain->SetBranchAddress("pc3zR",&pc3zR);
   fChain->SetBranchAddress("ppc1xR",&ppc1xR);
   fChain->SetBranchAddress("ppc1yR",&ppc1yR);
   fChain->SetBranchAddress("ppc1zR",&ppc1zR);
   fChain->SetBranchAddress("ppc2xR",&ppc2xR);
   fChain->SetBranchAddress("ppc2yR",&ppc2yR);
   fChain->SetBranchAddress("ppc2zR",&ppc2zR);
   fChain->SetBranchAddress("ppc3xR",&ppc3xR);
   fChain->SetBranchAddress("ppc3yR",&ppc3yR);
   fChain->SetBranchAddress("ppc3zR",&ppc3zR);
   //   fChain->SetBranchAddress("tofidMc",&tofidMc);
   fChain->SetBranchAddress("tofxMc",&tofxMc);
   fChain->SetBranchAddress("tofyMc",&tofyMc);
   fChain->SetBranchAddress("tofzMc",&tofzMc);
   fChain->SetBranchAddress("toftMc",&toftMc);
   fChain->SetBranchAddress("tofeMc",&tofeMc);
   fChain->SetBranchAddress("pltofMc",&pltofMc);
   //   fChain->SetBranchAddress("tofidS",&tofidS);
   fChain->SetBranchAddress("tofxS",&tofxS);
   fChain->SetBranchAddress("tofyS",&tofyS);
   fChain->SetBranchAddress("tofzS",&tofzS);
   fChain->SetBranchAddress("toftS",&toftS);
   fChain->SetBranchAddress("tofeS",&tofeS);
   fChain->SetBranchAddress("tofpidS",&tofpidS);
   fChain->SetBranchAddress("ptofxS",&ptofxS);
   fChain->SetBranchAddress("ptofyS",&ptofyS);
   fChain->SetBranchAddress("ptofzS",&ptofzS);
   fChain->SetBranchAddress("pltofS",&pltofS);
   //   fChain->SetBranchAddress("tofidE",&tofidE);
   //   fChain->SetBranchAddress("tofidR",&tofidR);
   fChain->SetBranchAddress("tofxR",&tofxR);
   fChain->SetBranchAddress("tofyR",&tofyR);
   fChain->SetBranchAddress("tofzR",&tofzR);
   fChain->SetBranchAddress("toftR",&toftR);
   fChain->SetBranchAddress("tofeR",&tofeR);
   fChain->SetBranchAddress("tofpidR",&tofpidR);
   fChain->SetBranchAddress("ptofxR",&ptofxR);
   fChain->SetBranchAddress("ptofyR",&ptofyR);
   fChain->SetBranchAddress("ptofzR",&ptofzR);
   fChain->SetBranchAddress("pltofR",&pltofR);
   //   fChain->SetBranchAddress("tecidMc",&tecidMc);
   fChain->SetBranchAddress("tecxMc",&tecxMc);
   fChain->SetBranchAddress("tecyMc",&tecyMc);
   fChain->SetBranchAddress("teczMc",&teczMc);
   //   fChain->SetBranchAddress("tecidS",&tecidS);
   //   fChain->SetBranchAddress("tecxS",&tecxS);
   //   fChain->SetBranchAddress("tecyS",&tecyS);
   //   fChain->SetBranchAddress("teczS",&teczS);
   fChain->SetBranchAddress("ptecxS",&ptecxS);
   fChain->SetBranchAddress("ptecyS",&ptecyS);
   fChain->SetBranchAddress("pteczS",&pteczS);
   //   fChain->SetBranchAddress("tecidE",&tecidE);
   //   fChain->SetBranchAddress("tecidR",&tecidR);
//    fChain->SetBranchAddress("tecxR",&tecxR);
//    fChain->SetBranchAddress("tecyR",&tecyR);
//    fChain->SetBranchAddress("teczR",&teczR);
   fChain->SetBranchAddress("ptecxR",&ptecxR);
   fChain->SetBranchAddress("ptecyR",&ptecyR);
   fChain->SetBranchAddress("pteczR",&pteczR);
   fChain->SetBranchAddress("plcrkMc",&plcrkMc);
   fChain->SetBranchAddress("plcrkS",&plcrkS);
   fChain->SetBranchAddress("crkaccS",&crkaccS);
   fChain->SetBranchAddress("crknpmt0S",&crknpmt0S);
   fChain->SetBranchAddress("crknpmt1S",&crknpmt1S);
   fChain->SetBranchAddress("crknpmt3S",&crknpmt3S);
   fChain->SetBranchAddress("crknpe0S",&crknpe0S);
   fChain->SetBranchAddress("crknpe1S",&crknpe1S);
   fChain->SetBranchAddress("crknpe3S",&crknpe3S);
   fChain->SetBranchAddress("crkchi2S",&crkchi2S);
   fChain->SetBranchAddress("crkdispS",&crkdispS);
   fChain->SetBranchAddress("crkpathS",&crkpathS);
   fChain->SetBranchAddress("plcrkR",&plcrkR);
   fChain->SetBranchAddress("crkaccR",&crkaccR);
   fChain->SetBranchAddress("crknpmt0R",&crknpmt0R);
   fChain->SetBranchAddress("crknpmt1R",&crknpmt1R);
   fChain->SetBranchAddress("crknpmt3R",&crknpmt3R);
   fChain->SetBranchAddress("crknpe0R",&crknpe0R);
   fChain->SetBranchAddress("crknpe1R",&crknpe1R);
   fChain->SetBranchAddress("crknpe3R",&crknpe3R);
   fChain->SetBranchAddress("crkchi2R",&crkchi2R);
   fChain->SetBranchAddress("crkdispR",&crkdispR);
   fChain->SetBranchAddress("crkpathR",&crkpathR);
   //   fChain->SetBranchAddress("emcidMc",&emcidMc);
   fChain->SetBranchAddress("emcxMc",&emcxMc);
   fChain->SetBranchAddress("emcyMc",&emcyMc);
   fChain->SetBranchAddress("emczMc",&emczMc);
   fChain->SetBranchAddress("plemcMc",&plemcMc);
   fChain->SetBranchAddress("emctrkno0Mc",&emctrkno0Mc);
   fChain->SetBranchAddress("emctrkno1Mc",&emctrkno1Mc);
   fChain->SetBranchAddress("emctrkno2Mc",&emctrkno2Mc);
   fChain->SetBranchAddress("emctwrhit0Mc",&emctwrhit0Mc);
   fChain->SetBranchAddress("emctwrhit1Mc",&emctwrhit1Mc);
   fChain->SetBranchAddress("emctwrhit2Mc",&emctwrhit2Mc);
   fChain->SetBranchAddress("emcpid0Mc",&emcpid0Mc);
   fChain->SetBranchAddress("emcpid1Mc",&emcpid1Mc);
   fChain->SetBranchAddress("emcpid2Mc",&emcpid2Mc);
   fChain->SetBranchAddress("emcedep0Mc",&emcedep0Mc);
   fChain->SetBranchAddress("emcedep1Mc",&emcedep1Mc);
   fChain->SetBranchAddress("emcedep2Mc",&emcedep2Mc);
   fChain->SetBranchAddress("emcptot0Mc",&emcptot0Mc);
   fChain->SetBranchAddress("emcptot1Mc",&emcptot1Mc);
   fChain->SetBranchAddress("emcptot2Mc",&emcptot2Mc);
   //   fChain->SetBranchAddress("emcidS",&emcidS);
   fChain->SetBranchAddress("emcxS",&emcxS);
   fChain->SetBranchAddress("emcyS",&emcyS);
   fChain->SetBranchAddress("emczS",&emczS);
   fChain->SetBranchAddress("pemcxS",&pemcxS);
   fChain->SetBranchAddress("pemcyS",&pemcyS);
   fChain->SetBranchAddress("pemczS",&pemczS);
   fChain->SetBranchAddress("plemcS",&plemcS);
   fChain->SetBranchAddress("emcswkeyS",&emcswkeyS);
   fChain->SetBranchAddress("emcmeaseS",&emcmeaseS);
   fChain->SetBranchAddress("emcecoreS",&emcecoreS);
   fChain->SetBranchAddress("emcecentS",&emcecentS);
   //   fChain->SetBranchAddress("emcecorrS",&emcecorrS);
   fChain->SetBranchAddress("emctofS",&emctofS);
   fChain->SetBranchAddress("emctofcorrS",&emctofcorrS);
   fChain->SetBranchAddress("emctofminS",&emctofminS);
   fChain->SetBranchAddress("emcprobphotS",&emcprobphotS);
   fChain->SetBranchAddress("emctwrhitS",&emctwrhitS);
   fChain->SetBranchAddress("emcchi2S",&emcchi2S);
   fChain->SetBranchAddress("emcpartesum0S",&emcpartesum0S);
   fChain->SetBranchAddress("emcpartesum1S",&emcpartesum1S);
   fChain->SetBranchAddress("emcpartesum2S",&emcpartesum2S);
   fChain->SetBranchAddress("emcpartesum3S",&emcpartesum3S);
//    fChain->SetBranchAddress("emcidE",&emcidE);
//    fChain->SetBranchAddress("emcidR",&emcidR);
   fChain->SetBranchAddress("emcxR",&emcxR);
   fChain->SetBranchAddress("emcyR",&emcyR);
   fChain->SetBranchAddress("emczR",&emczR);
   fChain->SetBranchAddress("pemcxR",&pemcxR);
   fChain->SetBranchAddress("pemcyR",&pemcyR);
   fChain->SetBranchAddress("pemczR",&pemczR);
   fChain->SetBranchAddress("plemcR",&plemcR);
   fChain->SetBranchAddress("emcswkeyR",&emcswkeyR);
   fChain->SetBranchAddress("emcmeaseR",&emcmeaseR);
   fChain->SetBranchAddress("emcecoreR",&emcecoreR);
   fChain->SetBranchAddress("emcecentR",&emcecentR);
   fChain->SetBranchAddress("emcecorrR",&emcecorrR);
   fChain->SetBranchAddress("emctofR",&emctofR);
   fChain->SetBranchAddress("emctofcorrR",&emctofcorrR);
   fChain->SetBranchAddress("emctofminR",&emctofminR);
   fChain->SetBranchAddress("emcprobphotR",&emcprobphotR);
   fChain->SetBranchAddress("emctwrhitR",&emctwrhitR);
   fChain->SetBranchAddress("emcchi2R",&emcchi2R);
   fChain->SetBranchAddress("emcpartesum0R",&emcpartesum0R);
   fChain->SetBranchAddress("emcpartesum1R",&emcpartesum1R);
   fChain->SetBranchAddress("emcpartesum2R",&emcpartesum2R);
   fChain->SetBranchAddress("emcpartesum3R",&emcpartesum3R);
   //   fChain->SetBranchAddress("nx1x2fitS",&nx1x2fitS);
   //   fChain->SetBranchAddress("mchi2S",&mchi2S);
   //   fChain->SetBranchAddress("errS",&errS);
   //   fChain->SetBranchAddress("alphafS",&alphafS);
   //   fChain->SetBranchAddress("nx1x2fitR",&nx1x2fitR);
   //   fChain->SetBranchAddress("mchi2R",&mchi2R);
   //   fChain->SetBranchAddress("errR",&errR);
   //   fChain->SetBranchAddress("alphafR",&alphafR);
   fChain->SetBranchAddress("sumfound",&sumfound);
   fChain->SetBranchAddress("solution",&solution);
   fChain->SetBranchAddress("mulmainS",&mulmainS);
   fChain->SetBranchAddress("xmulmainS",&xmulmainS);
   fChain->SetBranchAddress("uvmulmainS",&uvmulmainS);
   //   fChain->SetBranchAddress("mainIDS",&mainIDS);
   //   fChain->SetBranchAddress("xmainIDS",&xmainIDS);
   //   fChain->SetBranchAddress("uvmainIDS",&uvmainIDS);
   fChain->SetBranchAddress("purityS",&purityS);
   fChain->SetBranchAddress("xpurityS",&xpurityS);
   fChain->SetBranchAddress("uvpurityS",&uvpurityS);
//    fChain->SetBranchAddress("dalphaS",&dalphaS);
//    fChain->SetBranchAddress("dbetaS",&dbetaS);
//    fChain->SetBranchAddress("dphiS",&dphiS);
//    fChain->SetBranchAddress("dzedS",&dzedS);
//    fChain->SetBranchAddress("ddistS",&ddistS);
   fChain->SetBranchAddress("sumfoundS",&sumfoundS);
   //   fChain->SetBranchAddress("solutionS",&solutionS);
   //   fChain->SetBranchAddress("dalphaMinS",&dalphaMinS);
   //   fChain->SetBranchAddress("dphiMinS",&dphiMinS);
   fChain->SetBranchAddress("mulmainR",&mulmainR);
   fChain->SetBranchAddress("xmulmainR",&xmulmainR);
   fChain->SetBranchAddress("uvmulmainR",&uvmulmainR);
   //   fChain->SetBranchAddress("mainIDR",&mainIDR);
   //   fChain->SetBranchAddress("xmainIDR",&xmainIDR);
   //   fChain->SetBranchAddress("uvmainIDR",&uvmainIDR);
   fChain->SetBranchAddress("purityR",&purityR);
   fChain->SetBranchAddress("xpurityR",&xpurityR);
   fChain->SetBranchAddress("uvpurityR",&uvpurityR);
//    fChain->SetBranchAddress("dalphaR",&dalphaR);
//    fChain->SetBranchAddress("dbetaR",&dbetaR);
//    fChain->SetBranchAddress("dphiR",&dphiR);
//    fChain->SetBranchAddress("dzedR",&dzedR);
//   fChain->SetBranchAddress("ddistR",&ddistR);
   fChain->SetBranchAddress("sumfoundR",&sumfoundR);
   //   fChain->SetBranchAddress("solutionR",&solutionR);
   //   fChain->SetBranchAddress("dalphaMinR",&dalphaMinR);
   //   fChain->SetBranchAddress("dphiMinR",&dphiMinR);
   //   fChain->SetBranchAddress("pc2sS",&pc2sS);
   fChain->SetBranchAddress("pc2sdphiS",&pc2sdphiS);
   fChain->SetBranchAddress("pc2sdzS",&pc2sdzS);
   fChain->SetBranchAddress("pc2dphiS",&pc2dphiS);
   fChain->SetBranchAddress("pc2dzS",&pc2dzS);
   //   fChain->SetBranchAddress("pc3sS",&pc3sS);
   fChain->SetBranchAddress("pc3sdphiS",&pc3sdphiS);
   fChain->SetBranchAddress("pc3sdzS",&pc3sdzS);
   fChain->SetBranchAddress("pc3dphiS",&pc3dphiS);
   fChain->SetBranchAddress("pc3dzS",&pc3dzS);
   //   fChain->SetBranchAddress("tofsS",&tofsS);
   fChain->SetBranchAddress("tofsdphiS",&tofsdphiS);
   //   fChain->SetBranchAddress("tofsdzS",&tofsdzS);
   fChain->SetBranchAddress("tofdphiS",&tofdphiS);
   fChain->SetBranchAddress("tofdzS",&tofdzS);
   //   fChain->SetBranchAddress("emcsS",&emcsS);
   fChain->SetBranchAddress("emcsdphiS",&emcsdphiS);
   fChain->SetBranchAddress("emcsdzS",&emcsdzS);
   fChain->SetBranchAddress("emcdphiS",&emcdphiS);
   fChain->SetBranchAddress("emcdzS",&emcdzS);
   //   fChain->SetBranchAddress("pc2sR",&pc2sR);
   fChain->SetBranchAddress("pc2sdphiR",&pc2sdphiR);
   fChain->SetBranchAddress("pc2sdzR",&pc2sdzR);
   fChain->SetBranchAddress("pc2dphiR",&pc2dphiR);
   fChain->SetBranchAddress("pc2dzR",&pc2dzR);
   //   fChain->SetBranchAddress("pc3sR",&pc3sR);
   fChain->SetBranchAddress("pc3sdphiR",&pc3sdphiR);
   fChain->SetBranchAddress("pc3sdzR",&pc3sdzR);
   fChain->SetBranchAddress("pc3dphiR",&pc3dphiR);
   fChain->SetBranchAddress("pc3dzR",&pc3dzR);
   //   fChain->SetBranchAddress("tofsR",&tofsR);
   fChain->SetBranchAddress("tofsdphiR",&tofsdphiR);
   fChain->SetBranchAddress("tofsdzR",&tofsdzR);
   fChain->SetBranchAddress("tofdphiR",&tofdphiR);
   fChain->SetBranchAddress("tofdzR",&tofdzR);
   //   fChain->SetBranchAddress("emcsR",&emcsR);
   fChain->SetBranchAddress("emcsdphiR",&emcsdphiR);
   fChain->SetBranchAddress("emcsdzR",&emcsdzR);
   fChain->SetBranchAddress("emcdphiR",&emcdphiR);
   fChain->SetBranchAddress("emcdzR",&emcdzR);
   //   fChain->SetBranchAddress("centperp",&centperp);
   fChain->SetBranchAddress("centclock",&centclock);
   fChain->SetBranchAddress("x1hSG",&x1hSG);
   fChain->SetBranchAddress("x2hSG",&x2hSG);
   fChain->SetBranchAddress("uvhSG",&uvhSG);
   fChain->SetBranchAddress("x1hRG",&x1hRG);
   //   fChain->SetBranchAddress("x2RG",&x2RG);
   fChain->SetBranchAddress("uvhRG",&uvhRG);
   fChain->SetBranchAddress("x1hRS",&x1hRS);
   fChain->SetBranchAddress("x2hRS",&x2hRS);
   fChain->SetBranchAddress("uvhRS",&uvhRS);
   Notify();
}

Bool_t EmbedMcRecoTrack::Notify()
{
//   called when loading a new file
//   get branch pointers
   b_bbccent = fChain->GetBranch("bbccent");
   b_type = fChain->GetBranch("type");
   b_evtID = fChain->GetBranch("evtID");
   b_idGeant = fChain->GetBranch("idGeant");
   b_evtxG = fChain->GetBranch("evtxG");
   b_evtyG = fChain->GetBranch("evtyG");
   b_evtzG = fChain->GetBranch("evtzG");
   b_pptG = fChain->GetBranch("pptG");
   b_ppzG = fChain->GetBranch("ppzG");
   b_pthe0G = fChain->GetBranch("pthe0G");
   b_pphi0G = fChain->GetBranch("pphi0G");
   b_prapiG = fChain->GetBranch("prapiG");
   b_genG = fChain->GetBranch("genG");
   b_partidG = fChain->GetBranch("partidG");
   b_pareidG = fChain->GetBranch("pareidG");
   b_primidG = fChain->GetBranch("primidG");
   b_xvtxG = fChain->GetBranch("xvtxG");
   b_yvtxG = fChain->GetBranch("yvtxG");
   b_zvtxG = fChain->GetBranch("zvtxG");
   b_projzG = fChain->GetBranch("projzG");
   b_bbcQsum = fChain->GetBranch("bbcQsum");
   b_zdcEsum = fChain->GetBranch("zdcEsum");
   b_bbcvtx = fChain->GetBranch("bbcvtx");
   b_bbct0 = fChain->GetBranch("bbct0");
   b_ntrkG = fChain->GetBranch("ntrkG");
   b_dctrkidG = fChain->GetBranch("dctrkidG");
   b_dctrkQualG = fChain->GetBranch("dctrkQualG");
   b_armsidG = fChain->GetBranch("armsidG");
   b_the0G = fChain->GetBranch("the0G");
   b_phi0G = fChain->GetBranch("phi0G");
   b_alphaG = fChain->GetBranch("alphaG");
   b_thetaG = fChain->GetBranch("thetaG");
   b_phiG = fChain->GetBranch("phiG");
   b_betaG = fChain->GetBranch("betaG");
   b_zedG = fChain->GetBranch("zedG");
   b_momG = fChain->GetBranch("momG");
   b_x1mG = fChain->GetBranch("x1mG");
   b_x2mG = fChain->GetBranch("x2mG");
   b_x1hG = fChain->GetBranch("x1hG");
   b_x2hG = fChain->GetBranch("x2hG");
   b_uv1hG = fChain->GetBranch("uv1hG");
   b_uv2hG = fChain->GetBranch("uv2hG");
   b_ntrkS = fChain->GetBranch("ntrkS");
   b_dctrkidS = fChain->GetBranch("dctrkidS");
   b_dctrkQualS = fChain->GetBranch("dctrkQualS");
   b_the0S = fChain->GetBranch("the0S");
   b_phi0S = fChain->GetBranch("phi0S");
   b_alphaS = fChain->GetBranch("alphaS");
   b_thetaS = fChain->GetBranch("thetaS");
   b_phiS = fChain->GetBranch("phiS");
   b_betaS = fChain->GetBranch("betaS");
   b_zedS = fChain->GetBranch("zedS");
   b_dcchi2S = fChain->GetBranch("dcchi2S");
   b_momS = fChain->GetBranch("momS");
   b_x1mS = fChain->GetBranch("x1mS");
   b_x2mS = fChain->GetBranch("x2mS");
   b_x1hS = fChain->GetBranch("x1hS");
   b_x2hS = fChain->GetBranch("x2hS");
   b_uv1hS = fChain->GetBranch("uv1hS");
   b_uv2hS = fChain->GetBranch("uv2hS");
   b_projzS = fChain->GetBranch("projzS");
   b_x1hE = fChain->GetBranch("x1hE");
   b_x2hE = fChain->GetBranch("x2hE");
   b_uv1hE = fChain->GetBranch("uv1hE");
   b_uv2hE = fChain->GetBranch("uv2hE");
   b_ntrkwBR = fChain->GetBranch("ntrkwBR");
   b_ntrkeBR = fChain->GetBranch("ntrkeBR");
   b_ntrkwAR = fChain->GetBranch("ntrkwAR");
   b_ntrkeAR = fChain->GetBranch("ntrkeAR");
   b_dctrkidR = fChain->GetBranch("dctrkidR");
   b_dctrkQualR = fChain->GetBranch("dctrkQualR");
   b_armsidR = fChain->GetBranch("armsidR");
   b_the0R = fChain->GetBranch("the0R");
   b_phi0R = fChain->GetBranch("phi0R");
   b_alphaR = fChain->GetBranch("alphaR");
   b_thetaR = fChain->GetBranch("thetaR");
   b_phiR = fChain->GetBranch("phiR");
   b_betaR = fChain->GetBranch("betaR");
   b_zedR = fChain->GetBranch("zedR");
   b_momR = fChain->GetBranch("momR");
   b_dcchi2R = fChain->GetBranch("dcchi2R");
   b_x1mR = fChain->GetBranch("x1mR");
   b_x2mR = fChain->GetBranch("x2mR");
   b_x1hR = fChain->GetBranch("x1hR");
   b_x2hR = fChain->GetBranch("x2hR");
   b_uv1hR = fChain->GetBranch("uv1hR");
   b_uv2hR = fChain->GetBranch("uv2hR");
   b_projzR = fChain->GetBranch("projzR");
   b_pc1idMc = fChain->GetBranch("pc1idMc");
   b_pc2idMc = fChain->GetBranch("pc2idMc");
   b_pc3idMc = fChain->GetBranch("pc3idMc");
   b_pc1xMc = fChain->GetBranch("pc1xMc");
   b_pc1yMc = fChain->GetBranch("pc1yMc");
   b_pc1zMc = fChain->GetBranch("pc1zMc");
   b_pc2xMc = fChain->GetBranch("pc2xMc");
   b_pc2yMc = fChain->GetBranch("pc2yMc");
   b_pc2zMc = fChain->GetBranch("pc2zMc");
   b_pc3xMc = fChain->GetBranch("pc3xMc");
   b_pc3yMc = fChain->GetBranch("pc3yMc");
   b_pc3zMc = fChain->GetBranch("pc3zMc");
   b_pc1idS = fChain->GetBranch("pc1idS");
   b_pc2idS = fChain->GetBranch("pc2idS");
   b_pc3idS = fChain->GetBranch("pc3idS");
   b_pc1xS = fChain->GetBranch("pc1xS");
   b_pc1yS = fChain->GetBranch("pc1yS");
   b_pc1zS = fChain->GetBranch("pc1zS");
   b_pc2xS = fChain->GetBranch("pc2xS");
   b_pc2yS = fChain->GetBranch("pc2yS");
   b_pc2zS = fChain->GetBranch("pc2zS");
   b_pc3xS = fChain->GetBranch("pc3xS");
   b_pc3yS = fChain->GetBranch("pc3yS");
   b_pc3zS = fChain->GetBranch("pc3zS");
   b_ppc1xS = fChain->GetBranch("ppc1xS");
   b_ppc1yS = fChain->GetBranch("ppc1yS");
   b_ppc1zS = fChain->GetBranch("ppc1zS");
   b_ppc2xS = fChain->GetBranch("ppc2xS");
   b_ppc2yS = fChain->GetBranch("ppc2yS");
   b_ppc2zS = fChain->GetBranch("ppc2zS");
   b_ppc3xS = fChain->GetBranch("ppc3xS");
   b_ppc3yS = fChain->GetBranch("ppc3yS");
   b_ppc3zS = fChain->GetBranch("ppc3zS");
   b_pc1idE = fChain->GetBranch("pc1idE");
   b_pc2idE = fChain->GetBranch("pc2idE");
   b_pc3idE = fChain->GetBranch("pc3idE");
   b_pc1idR = fChain->GetBranch("pc1idR");
   b_pc2idR = fChain->GetBranch("pc2idR");
   b_pc3idR = fChain->GetBranch("pc3idR");
   b_pc1xR = fChain->GetBranch("pc1xR");
   b_pc1yR = fChain->GetBranch("pc1yR");
   b_pc1zR = fChain->GetBranch("pc1zR");
   b_pc2xR = fChain->GetBranch("pc2xR");
   b_pc2yR = fChain->GetBranch("pc2yR");
   b_pc2zR = fChain->GetBranch("pc2zR");
   b_pc3xR = fChain->GetBranch("pc3xR");
   b_pc3yR = fChain->GetBranch("pc3yR");
   b_pc3zR = fChain->GetBranch("pc3zR");
   b_ppc1xR = fChain->GetBranch("ppc1xR");
   b_ppc1yR = fChain->GetBranch("ppc1yR");
   b_ppc1zR = fChain->GetBranch("ppc1zR");
   b_ppc2xR = fChain->GetBranch("ppc2xR");
   b_ppc2yR = fChain->GetBranch("ppc2yR");
   b_ppc2zR = fChain->GetBranch("ppc2zR");
   b_ppc3xR = fChain->GetBranch("ppc3xR");
   b_ppc3yR = fChain->GetBranch("ppc3yR");
   b_ppc3zR = fChain->GetBranch("ppc3zR");
   b_tofidMc = fChain->GetBranch("tofidMc");
   b_tofxMc = fChain->GetBranch("tofxMc");
   b_tofyMc = fChain->GetBranch("tofyMc");
   b_tofzMc = fChain->GetBranch("tofzMc");
   b_toftMc = fChain->GetBranch("toftMc");
   b_tofeMc = fChain->GetBranch("tofeMc");
   b_pltofMc = fChain->GetBranch("pltofMc");
   b_tofidS = fChain->GetBranch("tofidS");
   b_tofxS = fChain->GetBranch("tofxS");
   b_tofyS = fChain->GetBranch("tofyS");
   b_tofzS = fChain->GetBranch("tofzS");
   b_toftS = fChain->GetBranch("toftS");
   b_tofeS = fChain->GetBranch("tofeS");
   b_tofpidS = fChain->GetBranch("tofpidS");
   b_ptofxS = fChain->GetBranch("ptofxS");
   b_ptofyS = fChain->GetBranch("ptofyS");
   b_ptofzS = fChain->GetBranch("ptofzS");
   b_pltofS = fChain->GetBranch("pltofS");
   b_tofidE = fChain->GetBranch("tofidE");
   b_tofidR = fChain->GetBranch("tofidR");
   b_tofxR = fChain->GetBranch("tofxR");
   b_tofyR = fChain->GetBranch("tofyR");
   b_tofzR = fChain->GetBranch("tofzR");
   b_toftR = fChain->GetBranch("toftR");
   b_tofeR = fChain->GetBranch("tofeR");
   b_tofpidR = fChain->GetBranch("tofpidR");
   b_ptofxR = fChain->GetBranch("ptofxR");
   b_ptofyR = fChain->GetBranch("ptofyR");
   b_ptofzR = fChain->GetBranch("ptofzR");
   b_pltofR = fChain->GetBranch("pltofR");
   b_tecidMc = fChain->GetBranch("tecidMc");
   b_tecxMc = fChain->GetBranch("tecxMc");
   b_tecyMc = fChain->GetBranch("tecyMc");
   b_teczMc = fChain->GetBranch("teczMc");
   b_tecidS = fChain->GetBranch("tecidS");
   b_tecxS = fChain->GetBranch("tecxS");
   b_tecyS = fChain->GetBranch("tecyS");
   b_teczS = fChain->GetBranch("teczS");
   b_ptecxS = fChain->GetBranch("ptecxS");
   b_ptecyS = fChain->GetBranch("ptecyS");
   b_pteczS = fChain->GetBranch("pteczS");
   b_tecidE = fChain->GetBranch("tecidE");
   b_tecidR = fChain->GetBranch("tecidR");
   b_tecxR = fChain->GetBranch("tecxR");
   b_tecyR = fChain->GetBranch("tecyR");
   b_teczR = fChain->GetBranch("teczR");
   b_ptecxR = fChain->GetBranch("ptecxR");
   b_ptecyR = fChain->GetBranch("ptecyR");
   b_pteczR = fChain->GetBranch("pteczR");
   b_plcrkMc = fChain->GetBranch("plcrkMc");
   b_plcrkS = fChain->GetBranch("plcrkS");
   b_crkaccS = fChain->GetBranch("crkaccS");
   b_crknpmt0S = fChain->GetBranch("crknpmt0S");
   b_crknpmt1S = fChain->GetBranch("crknpmt1S");
   b_crknpmt3S = fChain->GetBranch("crknpmt3S");
   b_crknpe0S = fChain->GetBranch("crknpe0S");
   b_crknpe1S = fChain->GetBranch("crknpe1S");
   b_crknpe3S = fChain->GetBranch("crknpe3S");
   b_crkchi2S = fChain->GetBranch("crkchi2S");
   b_crkdispS = fChain->GetBranch("crkdispS");
   b_crkpathS = fChain->GetBranch("crkpathS");
   b_plcrkR = fChain->GetBranch("plcrkR");
   b_crkaccR = fChain->GetBranch("crkaccR");
   b_crknpmt0R = fChain->GetBranch("crknpmt0R");
   b_crknpmt1R = fChain->GetBranch("crknpmt1R");
   b_crknpmt3R = fChain->GetBranch("crknpmt3R");
   b_crknpe0R = fChain->GetBranch("crknpe0R");
   b_crknpe1R = fChain->GetBranch("crknpe1R");
   b_crknpe3R = fChain->GetBranch("crknpe3R");
   b_crkchi2R = fChain->GetBranch("crkchi2R");
   b_crkdispR = fChain->GetBranch("crkdispR");
   b_crkpathR = fChain->GetBranch("crkpathR");
   b_emcidMc = fChain->GetBranch("emcidMc");
   b_emcxMc = fChain->GetBranch("emcxMc");
   b_emcyMc = fChain->GetBranch("emcyMc");
   b_emczMc = fChain->GetBranch("emczMc");
   b_plemcMc = fChain->GetBranch("plemcMc");
   b_emctrkno0Mc = fChain->GetBranch("emctrkno0Mc");
   b_emctrkno1Mc = fChain->GetBranch("emctrkno1Mc");
   b_emctrkno2Mc = fChain->GetBranch("emctrkno2Mc");
   b_emctwrhit0Mc = fChain->GetBranch("emctwrhit0Mc");
   b_emctwrhit1Mc = fChain->GetBranch("emctwrhit1Mc");
   b_emctwrhit2Mc = fChain->GetBranch("emctwrhit2Mc");
   b_emcpid0Mc = fChain->GetBranch("emcpid0Mc");
   b_emcpid1Mc = fChain->GetBranch("emcpid1Mc");
   b_emcpid2Mc = fChain->GetBranch("emcpid2Mc");
   b_emcedep0Mc = fChain->GetBranch("emcedep0Mc");
   b_emcedep1Mc = fChain->GetBranch("emcedep1Mc");
   b_emcedep2Mc = fChain->GetBranch("emcedep2Mc");
   b_emcptot0Mc = fChain->GetBranch("emcptot0Mc");
   b_emcptot1Mc = fChain->GetBranch("emcptot1Mc");
   b_emcptot2Mc = fChain->GetBranch("emcptot2Mc");
   b_emcidS = fChain->GetBranch("emcidS");
   b_emcxS = fChain->GetBranch("emcxS");
   b_emcyS = fChain->GetBranch("emcyS");
   b_emczS = fChain->GetBranch("emczS");
   b_pemcxS = fChain->GetBranch("pemcxS");
   b_pemcyS = fChain->GetBranch("pemcyS");
   b_pemczS = fChain->GetBranch("pemczS");
   b_plemcS = fChain->GetBranch("plemcS");
   b_emcswkeyS = fChain->GetBranch("emcswkeyS");
   b_emcmeaseS = fChain->GetBranch("emcmeaseS");
   b_emcecoreS = fChain->GetBranch("emcecoreS");
   b_emcecentS = fChain->GetBranch("emcecentS");
   b_emcecorrS = fChain->GetBranch("emcecorrS");
   b_emctofS = fChain->GetBranch("emctofS");
   b_emctofcorrS = fChain->GetBranch("emctofcorrS");
   b_emctofminS = fChain->GetBranch("emctofminS");
   b_emcprobphotS = fChain->GetBranch("emcprobphotS");
   b_emctwrhitS = fChain->GetBranch("emctwrhitS");
   b_emcchi2S = fChain->GetBranch("emcchi2S");
   b_emcpartesum0S = fChain->GetBranch("emcpartesum0S");
   b_emcpartesum1S = fChain->GetBranch("emcpartesum1S");
   b_emcpartesum2S = fChain->GetBranch("emcpartesum2S");
   b_emcpartesum3S = fChain->GetBranch("emcpartesum3S");
   b_emcidE = fChain->GetBranch("emcidE");
   b_emcidR = fChain->GetBranch("emcidR");
   b_emcxR = fChain->GetBranch("emcxR");
   b_emcyR = fChain->GetBranch("emcyR");
   b_emczR = fChain->GetBranch("emczR");
   b_pemcxR = fChain->GetBranch("pemcxR");
   b_pemcyR = fChain->GetBranch("pemcyR");
   b_pemczR = fChain->GetBranch("pemczR");
   b_plemcR = fChain->GetBranch("plemcR");
   b_emcswkeyR = fChain->GetBranch("emcswkeyR");
   b_emcmeaseR = fChain->GetBranch("emcmeaseR");
   b_emcecoreR = fChain->GetBranch("emcecoreR");
   b_emcecentR = fChain->GetBranch("emcecentR");
   b_emcecorrR = fChain->GetBranch("emcecorrR");
   b_emctofR = fChain->GetBranch("emctofR");
   b_emctofcorrR = fChain->GetBranch("emctofcorrR");
   b_emctofminR = fChain->GetBranch("emctofminR");
   b_emcprobphotR = fChain->GetBranch("emcprobphotR");
   b_emctwrhitR = fChain->GetBranch("emctwrhitR");
   b_emcchi2R = fChain->GetBranch("emcchi2R");
   b_emcpartesum0R = fChain->GetBranch("emcpartesum0R");
   b_emcpartesum1R = fChain->GetBranch("emcpartesum1R");
   b_emcpartesum2R = fChain->GetBranch("emcpartesum2R");
   b_emcpartesum3R = fChain->GetBranch("emcpartesum3R");
   b_nx1x2fitS = fChain->GetBranch("nx1x2fitS");
   b_mchi2S = fChain->GetBranch("mchi2S");
   b_errS = fChain->GetBranch("errS");
   b_alphafS = fChain->GetBranch("alphafS");
   b_nx1x2fitR = fChain->GetBranch("nx1x2fitR");
   b_mchi2R = fChain->GetBranch("mchi2R");
   b_errR = fChain->GetBranch("errR");
   b_alphafR = fChain->GetBranch("alphafR");
   b_sumfound = fChain->GetBranch("sumfound");
   b_solution = fChain->GetBranch("solution");
   b_mulmainS = fChain->GetBranch("mulmainS");
   b_xmulmainS = fChain->GetBranch("xmulmainS");
   b_uvmulmainS = fChain->GetBranch("uvmulmainS");
   b_mainIDS = fChain->GetBranch("mainIDS");
   b_xmainIDS = fChain->GetBranch("xmainIDS");
   b_uvmainIDS = fChain->GetBranch("uvmainIDS");
   b_purityS = fChain->GetBranch("purityS");
   b_xpurityS = fChain->GetBranch("xpurityS");
   b_uvpurityS = fChain->GetBranch("uvpurityS");
   b_dalphaS = fChain->GetBranch("dalphaS");
   b_dbetaS = fChain->GetBranch("dbetaS");
   b_dphiS = fChain->GetBranch("dphiS");
   b_dzedS = fChain->GetBranch("dzedS");
   b_ddistS = fChain->GetBranch("ddistS");
   b_sumfoundS = fChain->GetBranch("sumfoundS");
   b_solutionS = fChain->GetBranch("solutionS");
   b_dalphaMinS = fChain->GetBranch("dalphaMinS");
   b_dphiMinS = fChain->GetBranch("dphiMinS");
   b_mulmainR = fChain->GetBranch("mulmainR");
   b_xmulmainR = fChain->GetBranch("xmulmainR");
   b_uvmulmainR = fChain->GetBranch("uvmulmainR");
   b_mainIDR = fChain->GetBranch("mainIDR");
   b_xmainIDR = fChain->GetBranch("xmainIDR");
   b_uvmainIDR = fChain->GetBranch("uvmainIDR");
   b_purityR = fChain->GetBranch("purityR");
   b_xpurityR = fChain->GetBranch("xpurityR");
   b_uvpurityR = fChain->GetBranch("uvpurityR");
   b_dalphaR = fChain->GetBranch("dalphaR");
   b_dbetaR = fChain->GetBranch("dbetaR");
   b_dphiR = fChain->GetBranch("dphiR");
   b_dzedR = fChain->GetBranch("dzedR");
   b_ddistR = fChain->GetBranch("ddistR");
   b_sumfoundR = fChain->GetBranch("sumfoundR");
   b_solutionR = fChain->GetBranch("solutionR");
   b_dalphaMinR = fChain->GetBranch("dalphaMinR");
   b_dphiMinR = fChain->GetBranch("dphiMinR");
   b_pc2sS = fChain->GetBranch("pc2sS");
   b_pc2sdphiS = fChain->GetBranch("pc2sdphiS");
   b_pc2sdzS = fChain->GetBranch("pc2sdzS");
   b_pc2dphiS = fChain->GetBranch("pc2dphiS");
   b_pc2dzS = fChain->GetBranch("pc2dzS");
   b_pc3sS = fChain->GetBranch("pc3sS");
   b_pc3sdphiS = fChain->GetBranch("pc3sdphiS");
   b_pc3sdzS = fChain->GetBranch("pc3sdzS");
   b_pc3dphiS = fChain->GetBranch("pc3dphiS");
   b_pc3dzS = fChain->GetBranch("pc3dzS");
   b_tofsS = fChain->GetBranch("tofsS");
   b_tofsdphiS = fChain->GetBranch("tofsdphiS");
   b_tofsdzS = fChain->GetBranch("tofsdzS");
   b_tofdphiS = fChain->GetBranch("tofdphiS");
   b_tofdzS = fChain->GetBranch("tofdzS");
   b_emcsS = fChain->GetBranch("emcsS");
   b_emcsdphiS = fChain->GetBranch("emcsdphiS");
   b_emcsdzS = fChain->GetBranch("emcsdzS");
   b_emcdphiS = fChain->GetBranch("emcdphiS");
   b_emcdzS = fChain->GetBranch("emcdzS");
   b_pc2sR = fChain->GetBranch("pc2sR");
   b_pc2sdphiR = fChain->GetBranch("pc2sdphiR");
   b_pc2sdzR = fChain->GetBranch("pc2sdzR");
   b_pc2dphiR = fChain->GetBranch("pc2dphiR");
   b_pc2dzR = fChain->GetBranch("pc2dzR");
   b_pc3sR = fChain->GetBranch("pc3sR");
   b_pc3sdphiR = fChain->GetBranch("pc3sdphiR");
   b_pc3sdzR = fChain->GetBranch("pc3sdzR");
   b_pc3dphiR = fChain->GetBranch("pc3dphiR");
   b_pc3dzR = fChain->GetBranch("pc3dzR");
   b_tofsR = fChain->GetBranch("tofsR");
   b_tofsdphiR = fChain->GetBranch("tofsdphiR");
   b_tofsdzR = fChain->GetBranch("tofsdzR");
   b_tofdphiR = fChain->GetBranch("tofdphiR");
   b_tofdzR = fChain->GetBranch("tofdzR");
   b_emcsR = fChain->GetBranch("emcsR");
   b_emcsdphiR = fChain->GetBranch("emcsdphiR");
   b_emcsdzR = fChain->GetBranch("emcsdzR");
   b_emcdphiR = fChain->GetBranch("emcdphiR");
   b_emcdzR = fChain->GetBranch("emcdzR");
   b_centperp = fChain->GetBranch("centperp");
   b_centclock = fChain->GetBranch("centclock");
   b_x1hSG = fChain->GetBranch("x1hSG");
   b_x2hSG = fChain->GetBranch("x2hSG");
   b_uvhSG = fChain->GetBranch("uvhSG");
   b_x1hRG = fChain->GetBranch("x1hRG");
   b_x2RG = fChain->GetBranch("x2RG");
   b_uvhRG = fChain->GetBranch("uvhRG");
   b_x1hRS = fChain->GetBranch("x1hRS");
   b_x2hRS = fChain->GetBranch("x2hRS");
   b_uvhRS = fChain->GetBranch("uvhRS");
   return kTRUE;
}

void EmbedMcRecoTrack::Show(Int_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t EmbedMcRecoTrack::Cut(Int_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef EmbedMcRecoTrack_cxx

