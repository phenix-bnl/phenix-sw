//////////////////////////////////////////////////////////
//   This class has been automatically generated 
//     (Tue Dec 11 13:37:52 2001 by ROOT version3.01/05)
//   from TTree udst/micro DST
//   found on file: /phenix/data03/enoki/preco/data/trees/udst_run2_v01_28286-0.root
//////////////////////////////////////////////////////////


#ifndef mdst_run2tree_hh
#define mdst_run2tree_hh

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <stream.h>

static const int MAX_TRK  =2000;
static const int MAX_PC   =2000; 
static const int MAX_EMC  =2000;
static const int MAX_TOWER=2500; 
static const int MAX_TOF  =500;
static const int MAX_RING =200;
static const int MAX_RICH =500;
static const int MAX_TEC  =1000;

class mdst_run2tree {
   public :
   TTree          *fChain;   //pointer to the analyzed TTree or TChain
   Int_t           fCurrent; //current Tree number in a TChain
//Declaration of leaves types
   Int_t           run;
   Int_t           evt;
   Int_t           trig;
   Float_t         zdce0;
   Float_t         zdce1;
   Float_t         zdct0;
   Float_t         zdcz;
   Short_t         bbcn;
   Short_t         bbcs;
   Float_t         bbcqn;
   Float_t         bbcqs;
   Float_t         bbct0;
   Float_t         bbcz;
   Int_t           npc1;
   Float_t         pc1x[MAX_PC];
   Float_t         pc1y[MAX_PC];
   Float_t         pc1z[MAX_PC];
   Int_t           npc2;
   Float_t         pc2x[MAX_PC];
   Float_t         pc2y[MAX_PC];
   Float_t         pc2z[MAX_PC];
   Int_t           npc3;
   Float_t         pc3x[MAX_PC];
   Float_t         pc3y[MAX_PC];
   Float_t         pc3z[MAX_PC];
   Int_t           ntec;
   Float_t         tecinx[MAX_TEC];
   Float_t         teciny[MAX_TEC];
   Float_t         tecox[MAX_TEC];
   Float_t         tecoy[MAX_TEC];
   Short_t         tecnh[MAX_TEC];
   Short_t         tecside[MAX_TEC];
   Short_t         tecnbins[MAX_TEC];
   Float_t         tecdedx[MAX_TEC];
   Float_t         tectrklen[MAX_TEC];
   Int_t           nemc;
   Float_t         emcx[MAX_EMC];
   Float_t         emcy[MAX_EMC];
   Float_t         emcz[MAX_EMC];
   Short_t         emarm[MAX_EMC];
   Short_t         emsect[MAX_EMC];
   Short_t         emysect[MAX_EMC];
   Short_t         emzsect[MAX_EMC];
   Float_t         eme[MAX_EMC];
   Float_t         emecorr[MAX_EMC];
   Float_t         emecore[MAX_EMC];
   Float_t         emecent[MAX_EMC];
   Float_t         eme9[MAX_EMC];
   Float_t         emtc[MAX_EMC];
   Float_t         emtmax[MAX_EMC];
   Float_t         emtmin[MAX_EMC];
   Float_t         emprob[MAX_EMC];
   Float_t         emchi2[MAX_EMC];
   Short_t         emntwr[MAX_EMC];
   Short_t         emtrk[MAX_EMC];
   Float_t         emmom[MAX_EMC];
   Float_t         emtrkd[MAX_EMC];
   Float_t         empc3d[MAX_EMC];
   Int_t           ntower;
   Short_t         twrarm[MAX_TOWER];
   Short_t         twrsect[MAX_TOWER];
   Short_t         twrysect[MAX_TOWER];
   Short_t         twrzsect[MAX_TOWER];
   Short_t         twremc[MAX_TOWER];
   Float_t         twre[MAX_TOWER];
   Float_t         twrt[MAX_TOWER];
   Int_t           ntof;
   Short_t         tofslat[MAX_TOF];
   Float_t         tofx[MAX_TOF];
   Float_t         tofy[MAX_TOF];
   Float_t         tofz[MAX_TOF];
   Float_t         tofe[MAX_TOF];
   Float_t         toft[MAX_TOF];
   Short_t         toftrk[MAX_TOF];
   Float_t         tofmom[MAX_TOF];
   Float_t         toftrkd[MAX_TOF];
   Int_t           ncrk;
   Short_t         crkpmt[MAX_RING];
   Float_t         crkpe[MAX_RING];
   Float_t         crkt[MAX_RING];
   Int_t           ntrk;
   Short_t         quality[MAX_TRK];
   Float_t         zed[MAX_TRK];
   Float_t         phi[MAX_TRK];
   Float_t         alpha[MAX_TRK];
   Float_t         beta[MAX_TRK];
   Float_t         phi0[MAX_TRK];
   Float_t         the0[MAX_TRK];
   Float_t         mom[MAX_TRK];
   Float_t         nx1x2fit[MAX_TRK];
   Float_t         mchi2[MAX_TRK];
   Float_t         error[MAX_TRK];
   Float_t         alphaf[MAX_TRK];
   Short_t         pc1id[MAX_TRK];
   Short_t         pc2id[MAX_TRK];
   Short_t         pc3id[MAX_TRK];
   Short_t         emcid[MAX_TRK];
   Short_t         tofid[MAX_TRK];
   Short_t         tecid[MAX_TRK];
   Short_t         spc2id[MAX_TRK];
   Short_t         spc3id[MAX_TRK];
   Short_t         semcid[MAX_TRK];
   Short_t         stofid[MAX_TRK];
   Float_t         ppc1x[MAX_TRK];
   Float_t         ppc1y[MAX_TRK];
   Float_t         ppc1z[MAX_TRK];
   Float_t         ppc2x[MAX_TRK];
   Float_t         ppc2y[MAX_TRK];
   Float_t         ppc2z[MAX_TRK];
   Float_t         ppc3x[MAX_TRK];
   Float_t         ppc3y[MAX_TRK];
   Float_t         ppc3z[MAX_TRK];
   Float_t         pemcx[MAX_TRK];
   Float_t         pemcy[MAX_TRK];
   Float_t         pemcz[MAX_TRK];
   Float_t         ptofx[MAX_TRK];
   Float_t         ptofy[MAX_TRK];
   Float_t         ptofz[MAX_TRK];
   Float_t         pltof[MAX_TRK];
   Float_t         plemc[MAX_TRK];
   Float_t         pc2dphi[MAX_TRK];
   Float_t         pc2dz[MAX_TRK];
   Float_t         pc3dphi[MAX_TRK];
   Float_t         pc3dz[MAX_TRK];
   Float_t         spc2dphi[MAX_TRK];
   Float_t         spc2dz[MAX_TRK];
   Float_t         spc3dphi[MAX_TRK];
   Float_t         spc3dz[MAX_TRK];
   Float_t         emcdphi[MAX_TRK];
   Float_t         emcdz[MAX_TRK];
   Float_t         semcdphi[MAX_TRK];
   Float_t         semcdz[MAX_TRK];
   Short_t         arm[MAX_TRK];
   Short_t         sect[MAX_TRK];
   Short_t         ysect[MAX_TRK];
   Short_t         zsect[MAX_TRK];
   Float_t         ecorr[MAX_TRK];
   Float_t         ecore[MAX_TRK];
   Float_t         temc[MAX_TRK];
   Float_t         prob[MAX_TRK];
   Float_t         secorr[MAX_TRK];
   Float_t         secore[MAX_TRK];
   Float_t         stemc[MAX_TRK];
   Float_t         sprob[MAX_TRK];
   Float_t         tofdphi[MAX_TRK];
   Float_t         tofdz[MAX_TRK];
   Float_t         stofdphi[MAX_TRK];
   Float_t         stofdz[MAX_TRK];
   Int_t           slat[MAX_TRK];
   Float_t         ttof[MAX_TRK];
   Float_t         etof[MAX_TRK];
   Float_t         sttof[MAX_TRK];
   Float_t         setof[MAX_TRK];
   Short_t         acc[MAX_TRK];
   Int_t           ring[MAX_TRK];
   Short_t         n0[MAX_TRK];
   Float_t         npe0[MAX_TRK];
   Float_t         chi2[MAX_TRK];
   Float_t         disp[MAX_TRK];
   Float_t         tcrk[MAX_TRK];
   Short_t         sacc[MAX_TRK];
   Int_t           sring[MAX_TRK];
   Short_t         sn0[MAX_TRK];
   Float_t         snpe0[MAX_TRK];
   Float_t         schi2[MAX_TRK];
   Float_t         sdisp[MAX_TRK];
   Float_t         stcrk[MAX_TRK];
   Int_t           nring;
   Short_t         n0r[MAX_RING];
   Short_t         n1r[MAX_RING];
   Int_t           panel[MAX_RING];
   Float_t         npe0r[MAX_RING];
   Float_t         npe1r[MAX_RING];
   Float_t         dispr[MAX_RING];
   Float_t         chi2r[MAX_RING];
   Float_t         rpath[MAX_RING];
   Float_t         xphi[MAX_RING];
   Float_t         xz[MAX_RING];
   Float_t         cphi[MAX_RING];
   Float_t         cz[MAX_RING];
   Int_t           ringtrk[MAX_RING];
   Float_t         ringmom[MAX_RING];
   Float_t         ringecorr[MAX_RING];

//List of branches
   TBranch        *b_run;
   TBranch        *b_evt;
   TBranch        *b_trig;
   TBranch        *b_zdce0;
   TBranch        *b_zdce1;
   TBranch        *b_zdct0;
   TBranch        *b_zdcz;
   TBranch        *b_bbcn;
   TBranch        *b_bbcs;
   TBranch        *b_bbcqn;
   TBranch        *b_bbcqs;
   TBranch        *b_bbct0;
   TBranch        *b_bbcz;
   TBranch        *b_npc1;
   TBranch        *b_pc1x;
   TBranch        *b_pc1y;
   TBranch        *b_pc1z;
   TBranch        *b_npc2;
   TBranch        *b_pc2x;
   TBranch        *b_pc2y;
   TBranch        *b_pc2z;
   TBranch        *b_npc3;
   TBranch        *b_pc3x;
   TBranch        *b_pc3y;
   TBranch        *b_pc3z;
   TBranch        *b_ntec;
   TBranch        *b_tecinx;
   TBranch        *b_teciny;
   TBranch        *b_tecox;
   TBranch        *b_tecoy;
   TBranch        *b_tecnh;
   TBranch        *b_tecside;
   TBranch        *b_tecnbins;
   TBranch        *b_tecdedx;
   TBranch        *b_tectrklen;
   TBranch        *b_nemc;
   TBranch        *b_emcx;
   TBranch        *b_emcy;
   TBranch        *b_emcz;
   TBranch        *b_emarm;
   TBranch        *b_emsect;
   TBranch        *b_emysect;
   TBranch        *b_emzsect;
   TBranch        *b_eme;
   TBranch        *b_emecorr;
   TBranch        *b_emecore;
   TBranch        *b_emecent;
   TBranch        *b_eme9;
   TBranch        *b_emtc;
   TBranch        *b_emtmax;
   TBranch        *b_emtmin;
   TBranch        *b_emprob;
   TBranch        *b_emchi2;
   TBranch        *b_emntwr;
   TBranch        *b_emtrk;
   TBranch        *b_emmom;
   TBranch        *b_emtrkd;
   TBranch        *b_empc3d;
   TBranch        *b_ntower;
   TBranch        *b_twrarm;
   TBranch        *b_twrsect;
   TBranch        *b_twrysect;
   TBranch        *b_twrzsect;
   TBranch        *b_twremc;
   TBranch        *b_twre;
   TBranch        *b_twrt;
   TBranch        *b_ntof;
   TBranch        *b_tofslat;
   TBranch        *b_tofx;
   TBranch        *b_tofy;
   TBranch        *b_tofz;
   TBranch        *b_tofe;
   TBranch        *b_toft;
   TBranch        *b_toftrk;
   TBranch        *b_tofmom;
   TBranch        *b_toftrkd;
   TBranch        *b_ncrk;
   TBranch        *b_crkpmt;
   TBranch        *b_crkpe;
   TBranch        *b_crkt;
   TBranch        *b_ntrk;
   TBranch        *b_quality;
   TBranch        *b_zed;
   TBranch        *b_phi;
   TBranch        *b_alpha;
   TBranch        *b_beta;
   TBranch        *b_phi0;
   TBranch        *b_the0;
   TBranch        *b_mom;
   TBranch        *b_nx1x2fit;
   TBranch        *b_mchi2;
   TBranch        *b_error;
   TBranch        *b_alphaf;
   TBranch        *b_pc1id;
   TBranch        *b_pc2id;
   TBranch        *b_pc3id;
   TBranch        *b_emcid;
   TBranch        *b_tofid;
   TBranch        *b_tecid;
   TBranch        *b_spc2id;
   TBranch        *b_spc3id;
   TBranch        *b_semcid;
   TBranch        *b_stofid;
   TBranch        *b_ppc1x;
   TBranch        *b_ppc1y;
   TBranch        *b_ppc1z;
   TBranch        *b_ppc2x;
   TBranch        *b_ppc2y;
   TBranch        *b_ppc2z;
   TBranch        *b_ppc3x;
   TBranch        *b_ppc3y;
   TBranch        *b_ppc3z;
   TBranch        *b_pemcx;
   TBranch        *b_pemcy;
   TBranch        *b_pemcz;
   TBranch        *b_ptofx;
   TBranch        *b_ptofy;
   TBranch        *b_ptofz;
   TBranch        *b_pltof;
   TBranch        *b_plemc;
   TBranch        *b_pc2dphi;
   TBranch        *b_pc2dz;
   TBranch        *b_pc3dphi;
   TBranch        *b_pc3dz;
   TBranch        *b_spc2dphi;
   TBranch        *b_spc2dz;
   TBranch        *b_spc3dphi;
   TBranch        *b_spc3dz;
   TBranch        *b_emcdphi;
   TBranch        *b_emcdz;
   TBranch        *b_semcdphi;
   TBranch        *b_semcdz;
   TBranch        *b_arm;
   TBranch        *b_sect;
   TBranch        *b_ysect;
   TBranch        *b_zsect;
   TBranch        *b_ecorr;
   TBranch        *b_ecore;
   TBranch        *b_temc;
   TBranch        *b_prob;
   TBranch        *b_secorr;
   TBranch        *b_secore;
   TBranch        *b_stemc;
   TBranch        *b_sprob;
   TBranch        *b_tofdphi;
   TBranch        *b_tofdz;
   TBranch        *b_stofdphi;
   TBranch        *b_stofdz;
   TBranch        *b_slat;
   TBranch        *b_ttof;
   TBranch        *b_etof;
   TBranch        *b_sttof;
   TBranch        *b_setof;
   TBranch        *b_acc;
   TBranch        *b_ring;
   TBranch        *b_n0;
   TBranch        *b_npe0;
   TBranch        *b_chi2;
   TBranch        *b_disp;
   TBranch        *b_tcrk;
   TBranch        *b_sacc;
   TBranch        *b_sring;
   TBranch        *b_sn0;
   TBranch        *b_snpe0;
   TBranch        *b_schi2;
   TBranch        *b_sdisp;
   TBranch        *b_stcrk;
   TBranch        *b_nring;
   TBranch        *b_n0r;
   TBranch        *b_n1r;
   TBranch        *b_panel;
   TBranch        *b_npe0r;
   TBranch        *b_npe1r;
   TBranch        *b_dispr;
   TBranch        *b_chi2r;
   TBranch        *b_rpath;
   TBranch        *b_xphi;
   TBranch        *b_xz;
   TBranch        *b_cphi;
   TBranch        *b_cz;
   TBranch        *b_ringtrk;
   TBranch        *b_ringmom;
   TBranch        *b_ringecorr;

   mdst_run2tree(TTree *tree=0);
   ~mdst_run2tree();
   Int_t  Cut(Int_t entry);
   Int_t  GetEntry(Int_t entry);
   Int_t  LoadTree(Int_t entry);
   void   Init(TTree *tree);
   void   Loop();
   Bool_t Notify();
   void   Show(Int_t entry = -1);
};

#endif

#ifdef mdst_run2tree_cxx
mdst_run2tree::mdst_run2tree(TTree *tree)
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
     cout<<" mdst_run2tree got NULL TTree* "<<endl;
     return;
   }
   Init(tree);
}

mdst_run2tree::~mdst_run2tree()
{
   if (!fChain) return;
}

Int_t mdst_run2tree::GetEntry(Int_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Int_t mdst_run2tree::LoadTree(Int_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Int_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->IsA() != TChain::Class()) return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent) {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void mdst_run2tree::Init(TTree *tree)
{
//   Set branch addresses
   if (tree == 0) return;
   fChain    = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("run",&run);
   fChain->SetBranchAddress("evt",&evt);
   fChain->SetBranchAddress("trig",&trig);
   fChain->SetBranchAddress("zdce0",&zdce0);
   fChain->SetBranchAddress("zdce1",&zdce1);
   fChain->SetBranchAddress("zdct0",&zdct0);
   fChain->SetBranchAddress("zdcz",&zdcz);
   fChain->SetBranchAddress("bbcn",&bbcn);
   fChain->SetBranchAddress("bbcs",&bbcs);
   fChain->SetBranchAddress("bbcqn",&bbcqn);
   fChain->SetBranchAddress("bbcqs",&bbcqs);
   fChain->SetBranchAddress("bbct0",&bbct0);
   fChain->SetBranchAddress("bbcz",&bbcz);
   fChain->SetBranchAddress("npc1",&npc1);
   fChain->SetBranchAddress("pc1x",pc1x);
   fChain->SetBranchAddress("pc1y",pc1y);
   fChain->SetBranchAddress("pc1z",pc1z);
   fChain->SetBranchAddress("npc2",&npc2);
   fChain->SetBranchAddress("pc2x",pc2x);
   fChain->SetBranchAddress("pc2y",pc2y);
   fChain->SetBranchAddress("pc2z",pc2z);
   fChain->SetBranchAddress("npc3",&npc3);
   fChain->SetBranchAddress("pc3x",pc3x);
   fChain->SetBranchAddress("pc3y",pc3y);
   fChain->SetBranchAddress("pc3z",pc3z);
   fChain->SetBranchAddress("ntec",&ntec);
   fChain->SetBranchAddress("tecinx",&tecinx);
   fChain->SetBranchAddress("teciny",&teciny);
   fChain->SetBranchAddress("tecox",&tecox);
   fChain->SetBranchAddress("tecoy",&tecoy);
   fChain->SetBranchAddress("tecnh",&tecnh);
   fChain->SetBranchAddress("tecside",&tecside);
   fChain->SetBranchAddress("tecnbins",&tecnbins);
   fChain->SetBranchAddress("tecdedx",&tecdedx);
   fChain->SetBranchAddress("tectrklen",&tectrklen);
   fChain->SetBranchAddress("nemc",&nemc);
   fChain->SetBranchAddress("emcx",emcx);
   fChain->SetBranchAddress("emcy",emcy);
   fChain->SetBranchAddress("emcz",emcz);
   fChain->SetBranchAddress("emarm",emarm);
   fChain->SetBranchAddress("emsect",emsect);
   fChain->SetBranchAddress("emysect",emysect);
   fChain->SetBranchAddress("emzsect",emzsect);
   fChain->SetBranchAddress("eme",eme);
   fChain->SetBranchAddress("emecorr",emecorr);
   fChain->SetBranchAddress("emecore",emecore);
   fChain->SetBranchAddress("emecent",emecent);
   fChain->SetBranchAddress("eme9",eme9);
   fChain->SetBranchAddress("emtc",emtc);
   fChain->SetBranchAddress("emtmax",emtmax);
   fChain->SetBranchAddress("emtmin",emtmin);
   fChain->SetBranchAddress("emprob",emprob);
   fChain->SetBranchAddress("emchi2",emchi2);
   fChain->SetBranchAddress("emntwr",emntwr);
   fChain->SetBranchAddress("emtrk",emtrk);
   fChain->SetBranchAddress("emmom",emmom);
   fChain->SetBranchAddress("emtrkd",emtrkd);
   fChain->SetBranchAddress("empc3d",empc3d);
   fChain->SetBranchAddress("ntower",&ntower);
   fChain->SetBranchAddress("twrarm",twrarm);
   fChain->SetBranchAddress("twrsect",twrsect);
   fChain->SetBranchAddress("twrysect",twrysect);
   fChain->SetBranchAddress("twrzsect",twrzsect);
   fChain->SetBranchAddress("twremc",twremc);
   fChain->SetBranchAddress("twre",twre);
   fChain->SetBranchAddress("twrt",twrt);
   fChain->SetBranchAddress("ntof",&ntof);
   fChain->SetBranchAddress("tofslat",tofslat);
   fChain->SetBranchAddress("tofx",tofx);
   fChain->SetBranchAddress("tofy",tofy);
   fChain->SetBranchAddress("tofz",tofz);
   fChain->SetBranchAddress("tofe",tofe);
   fChain->SetBranchAddress("toft",toft);
   fChain->SetBranchAddress("toftrk",toftrk);
   fChain->SetBranchAddress("tofmom",tofmom);
   fChain->SetBranchAddress("toftrkd",toftrkd);
   fChain->SetBranchAddress("ncrk",&ncrk);
   fChain->SetBranchAddress("crkpmt",crkpmt);
   fChain->SetBranchAddress("crkpe",crkpe);
   fChain->SetBranchAddress("crkt",crkt);
   fChain->SetBranchAddress("ntrk",&ntrk);
   fChain->SetBranchAddress("quality",quality);
   fChain->SetBranchAddress("zed",zed);
   fChain->SetBranchAddress("phi",phi);
   fChain->SetBranchAddress("alpha",alpha);
   fChain->SetBranchAddress("beta",beta);
   fChain->SetBranchAddress("phi0",phi0);
   fChain->SetBranchAddress("the0",the0);
   fChain->SetBranchAddress("mom",mom);
   fChain->SetBranchAddress("nx1x2fit",nx1x2fit);
   fChain->SetBranchAddress("mchi2",mchi2);
   fChain->SetBranchAddress("error",error);
   fChain->SetBranchAddress("alphaf",alphaf);
   fChain->SetBranchAddress("pc1id",pc1id);
   fChain->SetBranchAddress("pc2id",pc2id);
   fChain->SetBranchAddress("pc3id",pc3id);
   fChain->SetBranchAddress("emcid",emcid);
   fChain->SetBranchAddress("tofid",tofid);
   fChain->SetBranchAddress("tecid",tecid);
   fChain->SetBranchAddress("spc2id",spc2id);
   fChain->SetBranchAddress("spc3id",spc3id);
   fChain->SetBranchAddress("semcid",semcid);
   fChain->SetBranchAddress("stofid",stofid);
   fChain->SetBranchAddress("ppc1x",ppc1x);
   fChain->SetBranchAddress("ppc1y",ppc1y);
   fChain->SetBranchAddress("ppc1z",ppc1z);
   fChain->SetBranchAddress("ppc2x",ppc2x);
   fChain->SetBranchAddress("ppc2y",ppc2y);
   fChain->SetBranchAddress("ppc2z",ppc2z);
   fChain->SetBranchAddress("ppc3x",ppc3x);
   fChain->SetBranchAddress("ppc3y",ppc3y);
   fChain->SetBranchAddress("ppc3z",ppc3z);
   fChain->SetBranchAddress("pemcx",pemcx);
   fChain->SetBranchAddress("pemcy",pemcy);
   fChain->SetBranchAddress("pemcz",pemcz);
   fChain->SetBranchAddress("ptofx",ptofx);
   fChain->SetBranchAddress("ptofy",ptofy);
   fChain->SetBranchAddress("ptofz",ptofz);
   fChain->SetBranchAddress("pltof",pltof);
   fChain->SetBranchAddress("plemc",plemc);
   fChain->SetBranchAddress("pc2dphi",pc2dphi);
   fChain->SetBranchAddress("pc2dz",pc2dz);
   fChain->SetBranchAddress("pc3dphi",pc3dphi);
   fChain->SetBranchAddress("pc3dz",pc3dz);
   fChain->SetBranchAddress("spc2dphi",spc2dphi);
   fChain->SetBranchAddress("spc2dz",spc2dz);
   fChain->SetBranchAddress("spc3dphi",spc3dphi);
   fChain->SetBranchAddress("spc3dz",spc3dz);
   fChain->SetBranchAddress("emcdphi",emcdphi);
   fChain->SetBranchAddress("emcdz",emcdz);
   fChain->SetBranchAddress("semcdphi",semcdphi);
   fChain->SetBranchAddress("semcdz",semcdz);
   fChain->SetBranchAddress("arm",arm);
   fChain->SetBranchAddress("sect",sect);
   fChain->SetBranchAddress("ysect",ysect);
   fChain->SetBranchAddress("zsect",zsect);
   fChain->SetBranchAddress("ecorr",ecorr);
   fChain->SetBranchAddress("ecore",ecore);
   fChain->SetBranchAddress("temc",temc);
   fChain->SetBranchAddress("prob",prob);
   fChain->SetBranchAddress("secorr",secorr);
   fChain->SetBranchAddress("secore",secore);
   fChain->SetBranchAddress("stemc",stemc);
   fChain->SetBranchAddress("sprob",sprob);
   fChain->SetBranchAddress("tofdphi",tofdphi);
   fChain->SetBranchAddress("tofdz",tofdz);
   fChain->SetBranchAddress("stofdphi",stofdphi);
   fChain->SetBranchAddress("stofdz",stofdz);
   fChain->SetBranchAddress("slat",slat);
   fChain->SetBranchAddress("ttof",ttof);
   fChain->SetBranchAddress("etof",etof);
   fChain->SetBranchAddress("sttof",sttof);
   fChain->SetBranchAddress("setof",setof);
   fChain->SetBranchAddress("acc",acc);
   fChain->SetBranchAddress("ring",ring);
   fChain->SetBranchAddress("n0",n0);
   fChain->SetBranchAddress("npe0",npe0);
   fChain->SetBranchAddress("chi2",chi2);
   fChain->SetBranchAddress("disp",disp);
   fChain->SetBranchAddress("tcrk",tcrk);
   fChain->SetBranchAddress("sacc",sacc);
   fChain->SetBranchAddress("sring",sring);
   fChain->SetBranchAddress("sn0",sn0);
   fChain->SetBranchAddress("snpe0",snpe0);
   fChain->SetBranchAddress("schi2",schi2);
   fChain->SetBranchAddress("sdisp",sdisp);
   fChain->SetBranchAddress("stcrk",stcrk);
   fChain->SetBranchAddress("nring",&nring);
   fChain->SetBranchAddress("n0r",n0r);
   fChain->SetBranchAddress("n1r",n1r);
   fChain->SetBranchAddress("panel",panel);
   fChain->SetBranchAddress("npe0r",npe0r);
   fChain->SetBranchAddress("npe1r",npe1r);
   fChain->SetBranchAddress("dispr",dispr);
   fChain->SetBranchAddress("chi2r",chi2r);
   fChain->SetBranchAddress("rpath",rpath);
   fChain->SetBranchAddress("xphi",xphi);
   fChain->SetBranchAddress("xz",xz);
   fChain->SetBranchAddress("cphi",cphi);
   fChain->SetBranchAddress("cz",cz);
   fChain->SetBranchAddress("ringtrk",ringtrk);
   fChain->SetBranchAddress("ringmom",ringmom);
   fChain->SetBranchAddress("ringecorr",ringecorr);
   Notify();
}

Bool_t mdst_run2tree::Notify()
{
//   called when loading a new file
//   get branch pointers
   b_run = fChain->GetBranch("run");
   b_evt = fChain->GetBranch("evt");
   b_trig = fChain->GetBranch("trig");
   b_zdce0 = fChain->GetBranch("zdce0");
   b_zdce1 = fChain->GetBranch("zdce1");
   b_zdct0 = fChain->GetBranch("zdct0");
   b_zdcz = fChain->GetBranch("zdcz");
   b_bbcn = fChain->GetBranch("bbcn");
   b_bbcs = fChain->GetBranch("bbcs");
   b_bbcqn = fChain->GetBranch("bbcqn");
   b_bbcqs = fChain->GetBranch("bbcqs");
   b_bbct0 = fChain->GetBranch("bbct0");
   b_bbcz = fChain->GetBranch("bbcz");
   b_npc1 = fChain->GetBranch("npc1");
   b_pc1x = fChain->GetBranch("pc1x");
   b_pc1y = fChain->GetBranch("pc1y");
   b_pc1z = fChain->GetBranch("pc1z");
   b_npc2 = fChain->GetBranch("npc2");
   b_pc2x = fChain->GetBranch("pc2x");
   b_pc2y = fChain->GetBranch("pc2y");
   b_pc2z = fChain->GetBranch("pc2z");
   b_npc3 = fChain->GetBranch("npc3");
   b_pc3x = fChain->GetBranch("pc3x");
   b_pc3y = fChain->GetBranch("pc3y");
   b_pc3z = fChain->GetBranch("pc3z");
   b_ntec = fChain->GetBranch("ntec");
   b_tecinx = fChain->GetBranch("tecinx");
   b_teciny = fChain->GetBranch("teciny");
   b_tecox = fChain->GetBranch("tecox");
   b_tecoy = fChain->GetBranch("tecoy");
   b_tecnh = fChain->GetBranch("tecnh");
   b_tecside = fChain->GetBranch("tecside");
   b_tecnbins = fChain->GetBranch("tecnbins");
   b_tecdedx = fChain->GetBranch("tecdedx");
   b_tectrklen = fChain->GetBranch("tectrklen");
   b_nemc = fChain->GetBranch("nemc");
   b_emcx = fChain->GetBranch("emcx");
   b_emcy = fChain->GetBranch("emcy");
   b_emcz = fChain->GetBranch("emcz");
   b_emarm = fChain->GetBranch("emarm");
   b_emsect = fChain->GetBranch("emsect");
   b_emysect = fChain->GetBranch("emysect");
   b_emzsect = fChain->GetBranch("emzsect");
   b_eme = fChain->GetBranch("eme");
   b_emecorr = fChain->GetBranch("emecorr");
   b_emecore = fChain->GetBranch("emecore");
   b_emecent = fChain->GetBranch("emecent");
   b_eme9 = fChain->GetBranch("eme9");
   b_emtc = fChain->GetBranch("emtc");
   b_emtmax = fChain->GetBranch("emtmax");
   b_emtmin = fChain->GetBranch("emtmin");
   b_emprob = fChain->GetBranch("emprob");
   b_emchi2 = fChain->GetBranch("emchi2");
   b_emntwr = fChain->GetBranch("emntwr");
   b_emtrk = fChain->GetBranch("emtrk");
   b_emmom = fChain->GetBranch("emmom");
   b_emtrkd = fChain->GetBranch("emtrkd");
   b_empc3d = fChain->GetBranch("empc3d");
   b_ntower = fChain->GetBranch("ntower");
   b_twrarm = fChain->GetBranch("twrarm");
   b_twrsect = fChain->GetBranch("twrsect");
   b_twrysect = fChain->GetBranch("twrysect");
   b_twrzsect = fChain->GetBranch("twrzsect");
   b_twremc = fChain->GetBranch("twremc");
   b_twre = fChain->GetBranch("twre");
   b_twrt = fChain->GetBranch("twrt");
   b_ntof = fChain->GetBranch("ntof");
   b_tofslat = fChain->GetBranch("tofslat");
   b_tofx = fChain->GetBranch("tofx");
   b_tofy = fChain->GetBranch("tofy");
   b_tofz = fChain->GetBranch("tofz");
   b_tofe = fChain->GetBranch("tofe");
   b_toft = fChain->GetBranch("toft");
   b_toftrk = fChain->GetBranch("toftrk");
   b_tofmom = fChain->GetBranch("tofmom");
   b_toftrkd = fChain->GetBranch("toftrkd");
   b_ncrk = fChain->GetBranch("ncrk");
   b_crkpmt = fChain->GetBranch("crkpmt");
   b_crkpe = fChain->GetBranch("crkpe");
   b_crkt = fChain->GetBranch("crkt");
   b_ntrk = fChain->GetBranch("ntrk");
   b_quality = fChain->GetBranch("quality");
   b_zed = fChain->GetBranch("zed");
   b_phi = fChain->GetBranch("phi");
   b_alpha = fChain->GetBranch("alpha");
   b_beta = fChain->GetBranch("beta");
   b_phi0 = fChain->GetBranch("phi0");
   b_the0 = fChain->GetBranch("the0");
   b_mom = fChain->GetBranch("mom");
   b_nx1x2fit = fChain->GetBranch("nx1x2fit");
   b_mchi2 = fChain->GetBranch("mchi2");
   b_error = fChain->GetBranch("error");
   b_alphaf = fChain->GetBranch("alphaf");
   b_pc1id = fChain->GetBranch("pc1id");
   b_pc2id = fChain->GetBranch("pc2id");
   b_pc3id = fChain->GetBranch("pc3id");
   b_emcid = fChain->GetBranch("emcid");
   b_tofid = fChain->GetBranch("tofid");
   b_tecid = fChain->GetBranch("tecid");
   b_spc2id = fChain->GetBranch("spc2id");
   b_spc3id = fChain->GetBranch("spc3id");
   b_semcid = fChain->GetBranch("semcid");
   b_stofid = fChain->GetBranch("stofid");
   b_ppc1x = fChain->GetBranch("ppc1x");
   b_ppc1y = fChain->GetBranch("ppc1y");
   b_ppc1z = fChain->GetBranch("ppc1z");
   b_ppc2x = fChain->GetBranch("ppc2x");
   b_ppc2y = fChain->GetBranch("ppc2y");
   b_ppc2z = fChain->GetBranch("ppc2z");
   b_ppc3x = fChain->GetBranch("ppc3x");
   b_ppc3y = fChain->GetBranch("ppc3y");
   b_ppc3z = fChain->GetBranch("ppc3z");
   b_pemcx = fChain->GetBranch("pemcx");
   b_pemcy = fChain->GetBranch("pemcy");
   b_pemcz = fChain->GetBranch("pemcz");
   b_ptofx = fChain->GetBranch("ptofx");
   b_ptofy = fChain->GetBranch("ptofy");
   b_ptofz = fChain->GetBranch("ptofz");
   b_pltof = fChain->GetBranch("pltof");
   b_plemc = fChain->GetBranch("plemc");
   b_pc2dphi = fChain->GetBranch("pc2dphi");
   b_pc2dz = fChain->GetBranch("pc2dz");
   b_pc3dphi = fChain->GetBranch("pc3dphi");
   b_pc3dz = fChain->GetBranch("pc3dz");
   b_spc2dphi = fChain->GetBranch("spc2dphi");
   b_spc2dz = fChain->GetBranch("spc2dz");
   b_spc3dphi = fChain->GetBranch("spc3dphi");
   b_spc3dz = fChain->GetBranch("spc3dz");
   b_emcdphi = fChain->GetBranch("emcdphi");
   b_emcdz = fChain->GetBranch("emcdz");
   b_semcdphi = fChain->GetBranch("semcdphi");
   b_semcdz = fChain->GetBranch("semcdz");
   b_arm = fChain->GetBranch("arm");
   b_sect = fChain->GetBranch("sect");
   b_ysect = fChain->GetBranch("ysect");
   b_zsect = fChain->GetBranch("zsect");
   b_ecorr = fChain->GetBranch("ecorr");
   b_ecore = fChain->GetBranch("ecore");
   b_temc = fChain->GetBranch("temc");
   b_prob = fChain->GetBranch("prob");
   b_secorr = fChain->GetBranch("secorr");
   b_secore = fChain->GetBranch("secore");
   b_stemc = fChain->GetBranch("stemc");
   b_sprob = fChain->GetBranch("sprob");
   b_tofdphi = fChain->GetBranch("tofdphi");
   b_tofdz = fChain->GetBranch("tofdz");
   b_stofdphi = fChain->GetBranch("stofdphi");
   b_stofdz = fChain->GetBranch("stofdz");
   b_slat = fChain->GetBranch("slat");
   b_ttof = fChain->GetBranch("ttof");
   b_etof = fChain->GetBranch("etof");
   b_sttof = fChain->GetBranch("sttof");
   b_setof = fChain->GetBranch("setof");
   b_acc = fChain->GetBranch("acc");
   b_ring = fChain->GetBranch("ring");
   b_n0 = fChain->GetBranch("n0");
   b_npe0 = fChain->GetBranch("npe0");
   b_chi2 = fChain->GetBranch("chi2");
   b_disp = fChain->GetBranch("disp");
   b_tcrk = fChain->GetBranch("tcrk");
   b_sacc = fChain->GetBranch("sacc");
   b_sring = fChain->GetBranch("sring");
   b_sn0 = fChain->GetBranch("sn0");
   b_snpe0 = fChain->GetBranch("snpe0");
   b_schi2 = fChain->GetBranch("schi2");
   b_sdisp = fChain->GetBranch("sdisp");
   b_stcrk = fChain->GetBranch("stcrk");
   b_nring = fChain->GetBranch("nring");
   b_n0r = fChain->GetBranch("n0r");
   b_n1r = fChain->GetBranch("n1r");
   b_panel = fChain->GetBranch("panel");
   b_npe0r = fChain->GetBranch("npe0r");
   b_npe1r = fChain->GetBranch("npe1r");
   b_dispr = fChain->GetBranch("dispr");
   b_chi2r = fChain->GetBranch("chi2r");
   b_rpath = fChain->GetBranch("rpath");
   b_xphi = fChain->GetBranch("xphi");
   b_xz = fChain->GetBranch("xz");
   b_cphi = fChain->GetBranch("cphi");
   b_cz = fChain->GetBranch("cz");
   b_ringtrk = fChain->GetBranch("ringtrk");
   b_ringmom = fChain->GetBranch("ringmom");
   b_ringecorr = fChain->GetBranch("ringecorr");
   return kTRUE;
}

void mdst_run2tree::Show(Int_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t mdst_run2tree::Cut(Int_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef mdst_run2tree_cxx

